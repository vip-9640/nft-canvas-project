import { Wallet, WalletError } from '@solana/wallet-adapter-base';
import { PropType } from '@vue/runtime-core';
export declare const WalletProvider: import("@vue/runtime-core").DefineComponent<{
    wallets: {
        type: PropType<Wallet[]>;
        default: () => never[];
    };
    autoConnect: {
        type: PropType<boolean>;
        default: boolean;
    };
    onError: {
        type: PropType<(error: WalletError) => void>;
        default: (error: WalletError) => void;
    };
    localStorageKey: {
        type: PropType<string>;
        default: string;
    };
}, () => import("@vue/runtime-core").VNode<import("@vue/runtime-core").RendererNode, import("@vue/runtime-core").RendererElement, {
    [key: string]: any;
}>[] | undefined, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, Record<string, any>, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    wallets: {
        type: PropType<Wallet[]>;
        default: () => never[];
    };
    autoConnect: {
        type: PropType<boolean>;
        default: boolean;
    };
    onError: {
        type: PropType<(error: WalletError) => void>;
        default: (error: WalletError) => void;
    };
    localStorageKey: {
        type: PropType<string>;
        default: string;
    };
}>>, {
    onError: (error: WalletError) => void;
    wallets: Wallet[];
    autoConnect: boolean;
    localStorageKey: string;
}>;
