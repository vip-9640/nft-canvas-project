{"version":3,"sources":["../src/index.ts","../src/schema/lifecycle.ts","../src/schema/base/lib.ts","../src/schema/user.ts","../src/schema/core.ts","../src/errors.ts"],"sourcesContent":["export * as Lifecycle from './schema/lifecycle';\nexport * as User from './schema/user';\n\nexport {\n  createClientMessageSchema,\n  createHostMessageSchema,\n  createFailedResponsePayload,\n  parseBaseClientMessage,\n  parseBaseHostMessage,\n  type BaseClientMessage,\n  type BaseHostMessage,\n  type BaseClientMessageSchema,\n  type BaseHostMessageSchema,\n} from './schema/base';\n\nexport {\n  parseCoreClientMessage,\n  parseCoreHostMessage,\n  type CoreClientMessage,\n  type CoreClientMessageSchema,\n  type CoreClientMessageType,\n  type CoreHostMessage,\n  type CoreHostMessageSchema,\n  type CoreHostMessageType,\n} from './schema/core';\n\nexport {\n  ClientAlreadyInitializedError,\n  ClientNotInitializedError,\n  WindowNotDefinedError,\n  ReferrerNotDefinedError,\n} from './errors';\n\nexport const VERSION = 'vNext';\n","import * as zod from 'zod';\nimport {\n  createClientMessageSchema,\n  createHostMessageSchema,\n  type BaseClientMessage,\n  type BaseHostMessage,\n} from './base';\n\nexport const userSchema = zod.object({\n  id: zod.string(),\n  username: zod.string(),\n  avatar: zod.string().optional(),\n});\n\nexport const contentSchema = zod.object({\n  id: zod.string(),\n  portalId: zod.string(),\n  portalName: zod.string(),\n});\n\nexport const initRequestSchema = createClientMessageSchema(\n  'lifecycle:init-request',\n  zod.object({\n    version: zod.string(),\n  }),\n);\n\nexport const initResponseSchema = createHostMessageSchema(\n  'lifecycle:init-response',\n  zod.object({\n    user: userSchema.optional(),\n    content: contentSchema.optional(),\n  }),\n);\n\nexport const closeMessageSchema = createHostMessageSchema('lifecycle:close');\n\nexport interface User extends zod.infer<typeof userSchema> {}\nexport interface Content extends zod.infer<typeof contentSchema> {}\nexport interface InitRequest\n  extends BaseClientMessage<typeof initRequestSchema> {}\nexport interface InitResponse\n  extends BaseHostMessage<typeof initResponseSchema> {}\nexport interface CloseMessage\n  extends BaseClientMessage<typeof closeMessageSchema> {}\n","import * as zod from 'zod';\nimport type {\n  CanvasMessageType,\n  BaseClientMessageSchema,\n  BaseHostMessageSchema,\n  BaseClientMessage,\n  BaseHostMessage,\n} from './types';\n\nexport function createClientMessageSchema<T extends CanvasMessageType>(\n  type: T,\n): BaseClientMessageSchema<T>;\n\nexport function createClientMessageSchema<\n  T extends CanvasMessageType,\n  D extends zod.ZodTypeAny,\n>(type: T, payloadSchema: D): BaseClientMessageSchema<T, D>;\n\nexport function createClientMessageSchema<\n  T extends CanvasMessageType,\n  D extends zod.ZodTypeAny,\n>(\n  type: T,\n  payloadSchema?: D,\n): BaseClientMessageSchema<T> | BaseClientMessageSchema<T, D> {\n  if (!payloadSchema) {\n    return zod.object({\n      type: zod.literal(type),\n    });\n  }\n\n  return zod.object({\n    type: zod.literal(type),\n    payload: payloadSchema,\n  });\n}\n\nexport function createHostMessageSchema<T extends CanvasMessageType>(\n  type: T,\n): BaseHostMessageSchema<T>;\n\nexport function createHostMessageSchema<\n  T extends CanvasMessageType,\n  D extends zod.ZodTypeAny,\n>(type: T, payloadSchema: D): BaseHostMessageSchema<T, D>;\n\nexport function createHostMessageSchema<\n  T extends CanvasMessageType,\n  D extends zod.ZodTypeAny,\n>(\n  type: T,\n  untrustedSchema?: D,\n): BaseHostMessageSchema<T> | BaseHostMessageSchema<T, D> {\n  if (!untrustedSchema) {\n    return zod.object({\n      type: zod.literal(type),\n      trustedBytes: zod.string(),\n    });\n  }\n\n  return zod.object({\n    type: zod.literal(type),\n    untrusted: untrustedSchema,\n    trustedBytes: zod.string(),\n  });\n}\n\nexport const createFailedResponsePayload = <\n  U extends string,\n  T extends readonly [U, ...U[]],\n>(\n  reasons: T,\n) => {\n  return zod.object({\n    success: zod.literal(false),\n    errorReason: zod.enum<string, T>(reasons),\n    error: zod.string().optional(),\n  });\n};\n\nexport const parseBaseClientMessage = (\n  message: unknown,\n): BaseClientMessage | undefined => {\n  const clientMessageSchema = zod.object({\n    type: zod.custom<CanvasMessageType>(),\n    payload: zod.any().optional(),\n  });\n\n  const parsedMessage = clientMessageSchema.safeParse(message);\n  if (!parsedMessage.success) {\n    return undefined;\n  }\n\n  return parsedMessage.data;\n};\n\nexport const parseBaseHostMessage = (\n  message: unknown,\n): BaseHostMessage | undefined => {\n  const hostMessageSchema = zod.object({\n    type: zod.custom<CanvasMessageType>(),\n    untrusted: zod.any().optional(),\n    trustedBytes: zod.string(),\n    zod: zod.custom<{ test: string }>(),\n  });\n\n  const parsedMessage = hostMessageSchema.safeParse(message);\n  if (!parsedMessage.success) {\n    return undefined;\n  }\n\n  return parsedMessage.data;\n};\n","import * as zod from 'zod';\nimport {\n  createClientMessageSchema,\n  createFailedResponsePayload,\n  createHostMessageSchema,\n  type BaseClientMessage,\n  type BaseHostMessage,\n} from './base';\n\nexport const connectWalletRequestSchema = createClientMessageSchema(\n  'user:connect-wallet-request',\n  zod.object({\n    chainId: zod.string(),\n  }),\n);\n\nexport const initialInteractionRequestSchema = createClientMessageSchema(\n  'user:initial-interaction-request',\n);\n\nexport const resizeRequestSchema = createClientMessageSchema(\n  'user:resize-request',\n  zod.object({\n    width: zod.number(),\n    height: zod.number(),\n  }),\n);\n\nexport const connectWalletResponseSchema = createHostMessageSchema(\n  'user:connect-wallet-response',\n  zod.union([\n    zod.object({\n      success: zod.literal(true),\n      address: zod.string(),\n      walletName: zod.string(),\n      walletIcon: zod.string(),\n      walletUrl: zod.string(),\n      walletSupportedTransactionVersions: zod\n        .custom<ReadonlySet<'legacy' | 0>>()\n        .optional(),\n    }),\n    createFailedResponsePayload(['user-cancelled', 'error']),\n  ]),\n);\n\n/**\n * Represents an unsigned transaction that needs to be signed by the user.\n * The `txId` is a serialized string of the transaction.\n * The `awaitCommitment` field is optional and can be used to specify the commitment level that should be awaited.\n * If not specified, it is assumed to be `confirmed`.\n */\nexport const unsignedTransactionSchema = zod.object({\n  unsignedTx: zod.string(),\n  awaitCommitment: zod.enum(['confirmed', 'finalized', 'none']).optional(),\n});\n\nexport const signAndSendTransactionRequestSchema = createClientMessageSchema(\n  'user:sign-send-transaction-request',\n  unsignedTransactionSchema.extend({\n    chainId: zod.string(),\n  }),\n);\n\nexport const signAndSendTransactionResponseSchema = createHostMessageSchema(\n  'user:sign-send-transaction-response',\n  zod.union([\n    zod.object({\n      success: zod.literal(true),\n      signedTx: zod.string(),\n    }),\n    createFailedResponsePayload(['user-cancelled', 'error']),\n  ]),\n);\n\nexport const openLnkRequestSchema = createClientMessageSchema(\n  'user:open-link-request',\n  zod.object({\n    url: zod.string(),\n  }),\n);\n\nexport const createPostRequestSchema = createClientMessageSchema(\n  'user:create-post-request',\n  zod.object({\n    htmlContent: zod.string(),\n  }),\n);\n\nexport const createPostResponseSchema = createHostMessageSchema(\n  'user:create-post-response',\n  zod.union([\n    zod.object({\n      success: zod.literal(true),\n      contentId: zod.bigint(),\n    }),\n    createFailedResponsePayload(['user-cancelled', 'error']),\n  ]),\n);\n\nexport const copyToClipboardRequestSchema = createClientMessageSchema(\n  'user:copy-to-clipboard-request',\n  zod.object({\n    content: zod.string(),\n  }),\n);\n\nexport const copyToClipboardResponseSchema = createHostMessageSchema(\n  'user:copy-to-clipboard-response',\n  zod.union([\n    zod.object({\n      success: zod.literal(true),\n    }),\n    createFailedResponsePayload(['user-cancelled', 'error']),\n  ]),\n);\n\nexport const contentReactionResponseSchema = createHostMessageSchema(\n  'user:content-reaction-response',\n  zod.union([\n    zod.object({\n      status: zod.literal('reacted'),\n      reaction: zod.string(),\n    }),\n    zod.object({\n      status: zod.literal('cleared'),\n    }),\n  ]),\n);\n\nexport interface InitialInteractionRequest\n  extends BaseClientMessage<typeof initialInteractionRequestSchema> {}\nexport interface ResizeRequest\n  extends BaseClientMessage<typeof resizeRequestSchema> {}\nexport interface ConnectWalletRequest\n  extends BaseClientMessage<typeof connectWalletRequestSchema> {}\nexport interface ConnectWalletResponse\n  extends BaseHostMessage<typeof connectWalletResponseSchema> {}\nexport type UnsignedTransaction = zod.infer<typeof unsignedTransactionSchema>;\nexport interface SignAndSendTransactionRequest\n  extends BaseClientMessage<typeof signAndSendTransactionRequestSchema> {}\nexport interface SignAndSendTransactionResponse\n  extends BaseHostMessage<typeof signAndSendTransactionResponseSchema> {}\nexport interface OpenLnkRequest\n  extends BaseClientMessage<typeof openLnkRequestSchema> {}\nexport interface CreatePostRequest\n  extends BaseClientMessage<typeof createPostRequestSchema> {}\nexport interface CreatePostResponse\n  extends BaseHostMessage<typeof createPostResponseSchema> {}\nexport interface CopyToClipboardRequest\n  extends BaseClientMessage<typeof copyToClipboardRequestSchema> {}\nexport interface CopyToClipboardResponse\n  extends BaseHostMessage<typeof copyToClipboardResponseSchema> {}\nexport interface ContentReactionResponse\n  extends BaseHostMessage<typeof contentReactionResponseSchema> {}\n","import * as zod from 'zod';\n\nimport {\n  closeMessageSchema,\n  initRequestSchema,\n  initResponseSchema,\n} from './lifecycle';\n\nimport {\n  initialInteractionRequestSchema,\n  resizeRequestSchema,\n  connectWalletRequestSchema,\n  connectWalletResponseSchema,\n  signAndSendTransactionRequestSchema,\n  signAndSendTransactionResponseSchema,\n  openLnkRequestSchema,\n  createPostRequestSchema,\n  createPostResponseSchema,\n  copyToClipboardRequestSchema,\n  copyToClipboardResponseSchema,\n  contentReactionResponseSchema,\n} from './user';\nimport type { BaseClientMessage, BaseHostMessage } from './base';\n\nconst coreClientSchemas = [\n  initRequestSchema,\n  initialInteractionRequestSchema,\n  resizeRequestSchema,\n  connectWalletRequestSchema,\n  signAndSendTransactionRequestSchema,\n  openLnkRequestSchema,\n  createPostRequestSchema,\n  copyToClipboardRequestSchema,\n] as const;\n\nconst coreHostSchemas = [\n  initResponseSchema,\n  closeMessageSchema,\n  connectWalletResponseSchema,\n  signAndSendTransactionResponseSchema,\n  createPostResponseSchema,\n  copyToClipboardResponseSchema,\n  contentReactionResponseSchema,\n] as const;\n\nexport type CoreClientMessageSchema = (typeof coreClientSchemas)[number];\nexport type CoreHostMessageSchema = (typeof coreHostSchemas)[number];\nexport type CoreClientMessage = BaseClientMessage<CoreClientMessageSchema>;\nexport type CoreHostMessage = BaseHostMessage<CoreHostMessageSchema>;\nexport type CoreClientMessageType = CoreClientMessage['type'];\nexport type CoreHostMessageType = CoreHostMessage['type'];\n\nexport const parseCoreClientMessage = (\n  message: unknown,\n): CoreClientMessage | undefined => {\n  const schema = zod.union(coreClientSchemas);\n\n  const parsedMessage = schema.safeParse(message);\n  if (!parsedMessage.success) {\n    return undefined;\n  }\n\n  return parsedMessage.data;\n};\n\nexport const parseCoreHostMessage = (\n  message: unknown,\n): CoreHostMessage | undefined => {\n  const schema = zod.union(coreHostSchemas);\n\n  const parsedMessage = schema.safeParse(message);\n  if (!parsedMessage.success) {\n    return undefined;\n  }\n\n  return parsedMessage.data;\n};\n","export class ClientAlreadyInitializedError extends Error {\n  name = 'ClientAlreadyInitializedError';\n  message: string = 'Client is already initialized';\n}\n\nexport class ClientNotInitializedError extends Error {\n  name = 'ClientNotInitializedError';\n  message: string = 'Client is not yet initialized';\n}\n\nexport class WindowNotDefinedError extends Error {\n  name = 'WindowNotDefinedError';\n  message: string = 'Window is not defined';\n}\n\nexport class ReferrerNotDefinedError extends Error {\n  name = 'ReferrerNotDefinedError';\n  message: string = 'Referrer is not defined';\n}\n"],"mappings":"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","names":["zod","zod","zod"]}