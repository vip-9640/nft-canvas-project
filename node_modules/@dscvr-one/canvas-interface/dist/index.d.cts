import * as zod from 'zod';

type CanvasMessageType = `${string}:${string}`;
type BaseClientMessageSchema<T extends CanvasMessageType = CanvasMessageType, D extends zod.ZodTypeAny | undefined = undefined> = D extends zod.ZodTypeAny ? zod.ZodObject<{
    type: zod.ZodLiteral<T>;
    payload: D;
}> : zod.ZodObject<{
    type: zod.ZodLiteral<T>;
}>;
type BaseHostMessageSchema<T extends CanvasMessageType = CanvasMessageType, D extends zod.ZodTypeAny | undefined = undefined> = D extends zod.ZodTypeAny ? zod.ZodObject<{
    type: zod.ZodLiteral<T>;
    untrusted: D;
    trustedBytes: zod.ZodString;
}> : zod.ZodObject<{
    type: zod.ZodLiteral<T>;
    trustedBytes: zod.ZodString;
}>;
type BaseClientMessage<T extends BaseClientMessageSchema = BaseClientMessageSchema<CanvasMessageType, zod.ZodTypeAny | undefined>> = zod.infer<T>;
type BaseHostMessage<T extends BaseHostMessageSchema = BaseHostMessageSchema<CanvasMessageType, zod.ZodTypeAny | undefined>> = zod.infer<T>;

declare function createClientMessageSchema<T extends CanvasMessageType>(type: T): BaseClientMessageSchema<T>;
declare function createClientMessageSchema<T extends CanvasMessageType, D extends zod.ZodTypeAny>(type: T, payloadSchema: D): BaseClientMessageSchema<T, D>;
declare function createHostMessageSchema<T extends CanvasMessageType>(type: T): BaseHostMessageSchema<T>;
declare function createHostMessageSchema<T extends CanvasMessageType, D extends zod.ZodTypeAny>(type: T, payloadSchema: D): BaseHostMessageSchema<T, D>;
declare const createFailedResponsePayload: <U extends string, T extends readonly [U, ...U[]]>(reasons: T) => zod.ZodObject<{
    success: zod.ZodLiteral<false>;
    errorReason: zod.ZodEnum<zod.Writeable<T>>;
    error: zod.ZodOptional<zod.ZodString>;
}, "strip", zod.ZodTypeAny, { [k in keyof zod.objectUtil.addQuestionMarks<zod.baseObjectOutputType<{
    success: zod.ZodLiteral<false>;
    errorReason: zod.ZodEnum<zod.Writeable<T>>;
    error: zod.ZodOptional<zod.ZodString>;
}>, any>]: zod.objectUtil.addQuestionMarks<zod.baseObjectOutputType<{
    success: zod.ZodLiteral<false>;
    errorReason: zod.ZodEnum<zod.Writeable<T>>;
    error: zod.ZodOptional<zod.ZodString>;
}>, any>[k]; }, { [k_1 in keyof zod.baseObjectInputType<{
    success: zod.ZodLiteral<false>;
    errorReason: zod.ZodEnum<zod.Writeable<T>>;
    error: zod.ZodOptional<zod.ZodString>;
}>]: zod.baseObjectInputType<{
    success: zod.ZodLiteral<false>;
    errorReason: zod.ZodEnum<zod.Writeable<T>>;
    error: zod.ZodOptional<zod.ZodString>;
}>[k_1]; }>;
declare const parseBaseClientMessage: (message: unknown) => BaseClientMessage | undefined;
declare const parseBaseHostMessage: (message: unknown) => BaseHostMessage | undefined;

declare const userSchema: zod.ZodObject<{
    id: zod.ZodString;
    username: zod.ZodString;
    avatar: zod.ZodOptional<zod.ZodString>;
}, "strip", zod.ZodTypeAny, {
    id: string;
    username: string;
    avatar?: string | undefined;
}, {
    id: string;
    username: string;
    avatar?: string | undefined;
}>;
declare const contentSchema: zod.ZodObject<{
    id: zod.ZodString;
    portalId: zod.ZodString;
    portalName: zod.ZodString;
}, "strip", zod.ZodTypeAny, {
    id: string;
    portalId: string;
    portalName: string;
}, {
    id: string;
    portalId: string;
    portalName: string;
}>;
declare const initRequestSchema: zod.ZodObject<{
    type: zod.ZodLiteral<"lifecycle:init-request">;
    payload: zod.ZodObject<{
        version: zod.ZodString;
    }, "strip", zod.ZodTypeAny, {
        version: string;
    }, {
        version: string;
    }>;
}, zod.UnknownKeysParam, zod.ZodTypeAny, {
    type: "lifecycle:init-request";
    payload: {
        version: string;
    };
}, {
    type: "lifecycle:init-request";
    payload: {
        version: string;
    };
}>;
declare const initResponseSchema: zod.ZodObject<{
    type: zod.ZodLiteral<"lifecycle:init-response">;
    untrusted: zod.ZodObject<{
        user: zod.ZodOptional<zod.ZodObject<{
            id: zod.ZodString;
            username: zod.ZodString;
            avatar: zod.ZodOptional<zod.ZodString>;
        }, "strip", zod.ZodTypeAny, {
            id: string;
            username: string;
            avatar?: string | undefined;
        }, {
            id: string;
            username: string;
            avatar?: string | undefined;
        }>>;
        content: zod.ZodOptional<zod.ZodObject<{
            id: zod.ZodString;
            portalId: zod.ZodString;
            portalName: zod.ZodString;
        }, "strip", zod.ZodTypeAny, {
            id: string;
            portalId: string;
            portalName: string;
        }, {
            id: string;
            portalId: string;
            portalName: string;
        }>>;
    }, "strip", zod.ZodTypeAny, {
        user?: {
            id: string;
            username: string;
            avatar?: string | undefined;
        } | undefined;
        content?: {
            id: string;
            portalId: string;
            portalName: string;
        } | undefined;
    }, {
        user?: {
            id: string;
            username: string;
            avatar?: string | undefined;
        } | undefined;
        content?: {
            id: string;
            portalId: string;
            portalName: string;
        } | undefined;
    }>;
    trustedBytes: zod.ZodString;
}, zod.UnknownKeysParam, zod.ZodTypeAny, {
    type: "lifecycle:init-response";
    untrusted: {
        user?: {
            id: string;
            username: string;
            avatar?: string | undefined;
        } | undefined;
        content?: {
            id: string;
            portalId: string;
            portalName: string;
        } | undefined;
    };
    trustedBytes: string;
}, {
    type: "lifecycle:init-response";
    untrusted: {
        user?: {
            id: string;
            username: string;
            avatar?: string | undefined;
        } | undefined;
        content?: {
            id: string;
            portalId: string;
            portalName: string;
        } | undefined;
    };
    trustedBytes: string;
}>;
declare const closeMessageSchema: zod.ZodObject<{
    type: zod.ZodLiteral<"lifecycle:close">;
    trustedBytes: zod.ZodString;
}, zod.UnknownKeysParam, zod.ZodTypeAny, {
    type: "lifecycle:close";
    trustedBytes: string;
}, {
    type: "lifecycle:close";
    trustedBytes: string;
}>;
interface User extends zod.infer<typeof userSchema> {
}
interface Content extends zod.infer<typeof contentSchema> {
}
interface InitRequest extends BaseClientMessage<typeof initRequestSchema> {
}
interface InitResponse extends BaseHostMessage<typeof initResponseSchema> {
}
interface CloseMessage extends BaseClientMessage<typeof closeMessageSchema> {
}

type lifecycle_CloseMessage = CloseMessage;
type lifecycle_Content = Content;
type lifecycle_InitRequest = InitRequest;
type lifecycle_InitResponse = InitResponse;
type lifecycle_User = User;
declare const lifecycle_closeMessageSchema: typeof closeMessageSchema;
declare const lifecycle_contentSchema: typeof contentSchema;
declare const lifecycle_initRequestSchema: typeof initRequestSchema;
declare const lifecycle_initResponseSchema: typeof initResponseSchema;
declare const lifecycle_userSchema: typeof userSchema;
declare namespace lifecycle {
  export { type lifecycle_CloseMessage as CloseMessage, type lifecycle_Content as Content, type lifecycle_InitRequest as InitRequest, type lifecycle_InitResponse as InitResponse, type lifecycle_User as User, lifecycle_closeMessageSchema as closeMessageSchema, lifecycle_contentSchema as contentSchema, lifecycle_initRequestSchema as initRequestSchema, lifecycle_initResponseSchema as initResponseSchema, lifecycle_userSchema as userSchema };
}

declare const connectWalletRequestSchema: zod.ZodObject<{
    type: zod.ZodLiteral<"user:connect-wallet-request">;
    payload: zod.ZodObject<{
        chainId: zod.ZodString;
    }, "strip", zod.ZodTypeAny, {
        chainId: string;
    }, {
        chainId: string;
    }>;
}, zod.UnknownKeysParam, zod.ZodTypeAny, {
    type: "user:connect-wallet-request";
    payload: {
        chainId: string;
    };
}, {
    type: "user:connect-wallet-request";
    payload: {
        chainId: string;
    };
}>;
declare const initialInteractionRequestSchema: zod.ZodObject<{
    type: zod.ZodLiteral<"user:initial-interaction-request">;
}, zod.UnknownKeysParam, zod.ZodTypeAny, {
    type: "user:initial-interaction-request";
}, {
    type: "user:initial-interaction-request";
}>;
declare const resizeRequestSchema: zod.ZodObject<{
    type: zod.ZodLiteral<"user:resize-request">;
    payload: zod.ZodObject<{
        width: zod.ZodNumber;
        height: zod.ZodNumber;
    }, "strip", zod.ZodTypeAny, {
        width: number;
        height: number;
    }, {
        width: number;
        height: number;
    }>;
}, zod.UnknownKeysParam, zod.ZodTypeAny, {
    type: "user:resize-request";
    payload: {
        width: number;
        height: number;
    };
}, {
    type: "user:resize-request";
    payload: {
        width: number;
        height: number;
    };
}>;
declare const connectWalletResponseSchema: zod.ZodObject<{
    type: zod.ZodLiteral<"user:connect-wallet-response">;
    untrusted: zod.ZodUnion<[zod.ZodObject<{
        success: zod.ZodLiteral<true>;
        address: zod.ZodString;
        walletName: zod.ZodString;
        walletIcon: zod.ZodString;
        walletUrl: zod.ZodString;
        walletSupportedTransactionVersions: zod.ZodOptional<zod.ZodType<ReadonlySet<0 | "legacy">, zod.ZodTypeDef, ReadonlySet<0 | "legacy">>>;
    }, "strip", zod.ZodTypeAny, {
        success: true;
        address: string;
        walletName: string;
        walletIcon: string;
        walletUrl: string;
        walletSupportedTransactionVersions?: ReadonlySet<0 | "legacy"> | undefined;
    }, {
        success: true;
        address: string;
        walletName: string;
        walletIcon: string;
        walletUrl: string;
        walletSupportedTransactionVersions?: ReadonlySet<0 | "legacy"> | undefined;
    }>, zod.ZodObject<{
        success: zod.ZodLiteral<false>;
        errorReason: zod.ZodEnum<["user-cancelled", "error"]>;
        error: zod.ZodOptional<zod.ZodString>;
    }, "strip", zod.ZodTypeAny, {
        success: false;
        errorReason: "error" | "user-cancelled";
        error?: string | undefined;
    }, {
        success: false;
        errorReason: "error" | "user-cancelled";
        error?: string | undefined;
    }>]>;
    trustedBytes: zod.ZodString;
}, zod.UnknownKeysParam, zod.ZodTypeAny, {
    type: "user:connect-wallet-response";
    untrusted: {
        success: true;
        address: string;
        walletName: string;
        walletIcon: string;
        walletUrl: string;
        walletSupportedTransactionVersions?: ReadonlySet<0 | "legacy"> | undefined;
    } | {
        success: false;
        errorReason: "error" | "user-cancelled";
        error?: string | undefined;
    };
    trustedBytes: string;
}, {
    type: "user:connect-wallet-response";
    untrusted: {
        success: true;
        address: string;
        walletName: string;
        walletIcon: string;
        walletUrl: string;
        walletSupportedTransactionVersions?: ReadonlySet<0 | "legacy"> | undefined;
    } | {
        success: false;
        errorReason: "error" | "user-cancelled";
        error?: string | undefined;
    };
    trustedBytes: string;
}>;
/**
 * Represents an unsigned transaction that needs to be signed by the user.
 * The `txId` is a serialized string of the transaction.
 * The `awaitCommitment` field is optional and can be used to specify the commitment level that should be awaited.
 * If not specified, it is assumed to be `confirmed`.
 */
declare const unsignedTransactionSchema: zod.ZodObject<{
    unsignedTx: zod.ZodString;
    awaitCommitment: zod.ZodOptional<zod.ZodEnum<["confirmed", "finalized", "none"]>>;
}, "strip", zod.ZodTypeAny, {
    unsignedTx: string;
    awaitCommitment?: "confirmed" | "finalized" | "none" | undefined;
}, {
    unsignedTx: string;
    awaitCommitment?: "confirmed" | "finalized" | "none" | undefined;
}>;
declare const signAndSendTransactionRequestSchema: zod.ZodObject<{
    type: zod.ZodLiteral<"user:sign-send-transaction-request">;
    payload: zod.ZodObject<zod.objectUtil.extendShape<{
        unsignedTx: zod.ZodString;
        awaitCommitment: zod.ZodOptional<zod.ZodEnum<["confirmed", "finalized", "none"]>>;
    }, {
        chainId: zod.ZodString;
    }>, "strip", zod.ZodTypeAny, {
        chainId: string;
        unsignedTx: string;
        awaitCommitment?: "confirmed" | "finalized" | "none" | undefined;
    }, {
        chainId: string;
        unsignedTx: string;
        awaitCommitment?: "confirmed" | "finalized" | "none" | undefined;
    }>;
}, zod.UnknownKeysParam, zod.ZodTypeAny, {
    type: "user:sign-send-transaction-request";
    payload: {
        chainId: string;
        unsignedTx: string;
        awaitCommitment?: "confirmed" | "finalized" | "none" | undefined;
    };
}, {
    type: "user:sign-send-transaction-request";
    payload: {
        chainId: string;
        unsignedTx: string;
        awaitCommitment?: "confirmed" | "finalized" | "none" | undefined;
    };
}>;
declare const signAndSendTransactionResponseSchema: zod.ZodObject<{
    type: zod.ZodLiteral<"user:sign-send-transaction-response">;
    untrusted: zod.ZodUnion<[zod.ZodObject<{
        success: zod.ZodLiteral<true>;
        signedTx: zod.ZodString;
    }, "strip", zod.ZodTypeAny, {
        success: true;
        signedTx: string;
    }, {
        success: true;
        signedTx: string;
    }>, zod.ZodObject<{
        success: zod.ZodLiteral<false>;
        errorReason: zod.ZodEnum<["user-cancelled", "error"]>;
        error: zod.ZodOptional<zod.ZodString>;
    }, "strip", zod.ZodTypeAny, {
        success: false;
        errorReason: "error" | "user-cancelled";
        error?: string | undefined;
    }, {
        success: false;
        errorReason: "error" | "user-cancelled";
        error?: string | undefined;
    }>]>;
    trustedBytes: zod.ZodString;
}, zod.UnknownKeysParam, zod.ZodTypeAny, {
    type: "user:sign-send-transaction-response";
    untrusted: {
        success: false;
        errorReason: "error" | "user-cancelled";
        error?: string | undefined;
    } | {
        success: true;
        signedTx: string;
    };
    trustedBytes: string;
}, {
    type: "user:sign-send-transaction-response";
    untrusted: {
        success: false;
        errorReason: "error" | "user-cancelled";
        error?: string | undefined;
    } | {
        success: true;
        signedTx: string;
    };
    trustedBytes: string;
}>;
declare const openLnkRequestSchema: zod.ZodObject<{
    type: zod.ZodLiteral<"user:open-link-request">;
    payload: zod.ZodObject<{
        url: zod.ZodString;
    }, "strip", zod.ZodTypeAny, {
        url: string;
    }, {
        url: string;
    }>;
}, zod.UnknownKeysParam, zod.ZodTypeAny, {
    type: "user:open-link-request";
    payload: {
        url: string;
    };
}, {
    type: "user:open-link-request";
    payload: {
        url: string;
    };
}>;
declare const createPostRequestSchema: zod.ZodObject<{
    type: zod.ZodLiteral<"user:create-post-request">;
    payload: zod.ZodObject<{
        htmlContent: zod.ZodString;
    }, "strip", zod.ZodTypeAny, {
        htmlContent: string;
    }, {
        htmlContent: string;
    }>;
}, zod.UnknownKeysParam, zod.ZodTypeAny, {
    type: "user:create-post-request";
    payload: {
        htmlContent: string;
    };
}, {
    type: "user:create-post-request";
    payload: {
        htmlContent: string;
    };
}>;
declare const createPostResponseSchema: zod.ZodObject<{
    type: zod.ZodLiteral<"user:create-post-response">;
    untrusted: zod.ZodUnion<[zod.ZodObject<{
        success: zod.ZodLiteral<true>;
        contentId: zod.ZodBigInt;
    }, "strip", zod.ZodTypeAny, {
        success: true;
        contentId: bigint;
    }, {
        success: true;
        contentId: bigint;
    }>, zod.ZodObject<{
        success: zod.ZodLiteral<false>;
        errorReason: zod.ZodEnum<["user-cancelled", "error"]>;
        error: zod.ZodOptional<zod.ZodString>;
    }, "strip", zod.ZodTypeAny, {
        success: false;
        errorReason: "error" | "user-cancelled";
        error?: string | undefined;
    }, {
        success: false;
        errorReason: "error" | "user-cancelled";
        error?: string | undefined;
    }>]>;
    trustedBytes: zod.ZodString;
}, zod.UnknownKeysParam, zod.ZodTypeAny, {
    type: "user:create-post-response";
    untrusted: {
        success: false;
        errorReason: "error" | "user-cancelled";
        error?: string | undefined;
    } | {
        success: true;
        contentId: bigint;
    };
    trustedBytes: string;
}, {
    type: "user:create-post-response";
    untrusted: {
        success: false;
        errorReason: "error" | "user-cancelled";
        error?: string | undefined;
    } | {
        success: true;
        contentId: bigint;
    };
    trustedBytes: string;
}>;
declare const copyToClipboardRequestSchema: zod.ZodObject<{
    type: zod.ZodLiteral<"user:copy-to-clipboard-request">;
    payload: zod.ZodObject<{
        content: zod.ZodString;
    }, "strip", zod.ZodTypeAny, {
        content: string;
    }, {
        content: string;
    }>;
}, zod.UnknownKeysParam, zod.ZodTypeAny, {
    type: "user:copy-to-clipboard-request";
    payload: {
        content: string;
    };
}, {
    type: "user:copy-to-clipboard-request";
    payload: {
        content: string;
    };
}>;
declare const copyToClipboardResponseSchema: zod.ZodObject<{
    type: zod.ZodLiteral<"user:copy-to-clipboard-response">;
    untrusted: zod.ZodUnion<[zod.ZodObject<{
        success: zod.ZodLiteral<true>;
    }, "strip", zod.ZodTypeAny, {
        success: true;
    }, {
        success: true;
    }>, zod.ZodObject<{
        success: zod.ZodLiteral<false>;
        errorReason: zod.ZodEnum<["user-cancelled", "error"]>;
        error: zod.ZodOptional<zod.ZodString>;
    }, "strip", zod.ZodTypeAny, {
        success: false;
        errorReason: "error" | "user-cancelled";
        error?: string | undefined;
    }, {
        success: false;
        errorReason: "error" | "user-cancelled";
        error?: string | undefined;
    }>]>;
    trustedBytes: zod.ZodString;
}, zod.UnknownKeysParam, zod.ZodTypeAny, {
    type: "user:copy-to-clipboard-response";
    untrusted: {
        success: false;
        errorReason: "error" | "user-cancelled";
        error?: string | undefined;
    } | {
        success: true;
    };
    trustedBytes: string;
}, {
    type: "user:copy-to-clipboard-response";
    untrusted: {
        success: false;
        errorReason: "error" | "user-cancelled";
        error?: string | undefined;
    } | {
        success: true;
    };
    trustedBytes: string;
}>;
declare const contentReactionResponseSchema: zod.ZodObject<{
    type: zod.ZodLiteral<"user:content-reaction-response">;
    untrusted: zod.ZodUnion<[zod.ZodObject<{
        status: zod.ZodLiteral<"reacted">;
        reaction: zod.ZodString;
    }, "strip", zod.ZodTypeAny, {
        status: "reacted";
        reaction: string;
    }, {
        status: "reacted";
        reaction: string;
    }>, zod.ZodObject<{
        status: zod.ZodLiteral<"cleared">;
    }, "strip", zod.ZodTypeAny, {
        status: "cleared";
    }, {
        status: "cleared";
    }>]>;
    trustedBytes: zod.ZodString;
}, zod.UnknownKeysParam, zod.ZodTypeAny, {
    type: "user:content-reaction-response";
    untrusted: {
        status: "reacted";
        reaction: string;
    } | {
        status: "cleared";
    };
    trustedBytes: string;
}, {
    type: "user:content-reaction-response";
    untrusted: {
        status: "reacted";
        reaction: string;
    } | {
        status: "cleared";
    };
    trustedBytes: string;
}>;
interface InitialInteractionRequest extends BaseClientMessage<typeof initialInteractionRequestSchema> {
}
interface ResizeRequest extends BaseClientMessage<typeof resizeRequestSchema> {
}
interface ConnectWalletRequest extends BaseClientMessage<typeof connectWalletRequestSchema> {
}
interface ConnectWalletResponse extends BaseHostMessage<typeof connectWalletResponseSchema> {
}
type UnsignedTransaction = zod.infer<typeof unsignedTransactionSchema>;
interface SignAndSendTransactionRequest extends BaseClientMessage<typeof signAndSendTransactionRequestSchema> {
}
interface SignAndSendTransactionResponse extends BaseHostMessage<typeof signAndSendTransactionResponseSchema> {
}
interface OpenLnkRequest extends BaseClientMessage<typeof openLnkRequestSchema> {
}
interface CreatePostRequest extends BaseClientMessage<typeof createPostRequestSchema> {
}
interface CreatePostResponse extends BaseHostMessage<typeof createPostResponseSchema> {
}
interface CopyToClipboardRequest extends BaseClientMessage<typeof copyToClipboardRequestSchema> {
}
interface CopyToClipboardResponse extends BaseHostMessage<typeof copyToClipboardResponseSchema> {
}
interface ContentReactionResponse extends BaseHostMessage<typeof contentReactionResponseSchema> {
}

type user_ConnectWalletRequest = ConnectWalletRequest;
type user_ConnectWalletResponse = ConnectWalletResponse;
type user_ContentReactionResponse = ContentReactionResponse;
type user_CopyToClipboardRequest = CopyToClipboardRequest;
type user_CopyToClipboardResponse = CopyToClipboardResponse;
type user_CreatePostRequest = CreatePostRequest;
type user_CreatePostResponse = CreatePostResponse;
type user_InitialInteractionRequest = InitialInteractionRequest;
type user_OpenLnkRequest = OpenLnkRequest;
type user_ResizeRequest = ResizeRequest;
type user_SignAndSendTransactionRequest = SignAndSendTransactionRequest;
type user_SignAndSendTransactionResponse = SignAndSendTransactionResponse;
type user_UnsignedTransaction = UnsignedTransaction;
declare const user_connectWalletRequestSchema: typeof connectWalletRequestSchema;
declare const user_connectWalletResponseSchema: typeof connectWalletResponseSchema;
declare const user_contentReactionResponseSchema: typeof contentReactionResponseSchema;
declare const user_copyToClipboardRequestSchema: typeof copyToClipboardRequestSchema;
declare const user_copyToClipboardResponseSchema: typeof copyToClipboardResponseSchema;
declare const user_createPostRequestSchema: typeof createPostRequestSchema;
declare const user_createPostResponseSchema: typeof createPostResponseSchema;
declare const user_initialInteractionRequestSchema: typeof initialInteractionRequestSchema;
declare const user_openLnkRequestSchema: typeof openLnkRequestSchema;
declare const user_resizeRequestSchema: typeof resizeRequestSchema;
declare const user_signAndSendTransactionRequestSchema: typeof signAndSendTransactionRequestSchema;
declare const user_signAndSendTransactionResponseSchema: typeof signAndSendTransactionResponseSchema;
declare const user_unsignedTransactionSchema: typeof unsignedTransactionSchema;
declare namespace user {
  export { type user_ConnectWalletRequest as ConnectWalletRequest, type user_ConnectWalletResponse as ConnectWalletResponse, type user_ContentReactionResponse as ContentReactionResponse, type user_CopyToClipboardRequest as CopyToClipboardRequest, type user_CopyToClipboardResponse as CopyToClipboardResponse, type user_CreatePostRequest as CreatePostRequest, type user_CreatePostResponse as CreatePostResponse, type user_InitialInteractionRequest as InitialInteractionRequest, type user_OpenLnkRequest as OpenLnkRequest, type user_ResizeRequest as ResizeRequest, type user_SignAndSendTransactionRequest as SignAndSendTransactionRequest, type user_SignAndSendTransactionResponse as SignAndSendTransactionResponse, type user_UnsignedTransaction as UnsignedTransaction, user_connectWalletRequestSchema as connectWalletRequestSchema, user_connectWalletResponseSchema as connectWalletResponseSchema, user_contentReactionResponseSchema as contentReactionResponseSchema, user_copyToClipboardRequestSchema as copyToClipboardRequestSchema, user_copyToClipboardResponseSchema as copyToClipboardResponseSchema, user_createPostRequestSchema as createPostRequestSchema, user_createPostResponseSchema as createPostResponseSchema, user_initialInteractionRequestSchema as initialInteractionRequestSchema, user_openLnkRequestSchema as openLnkRequestSchema, user_resizeRequestSchema as resizeRequestSchema, user_signAndSendTransactionRequestSchema as signAndSendTransactionRequestSchema, user_signAndSendTransactionResponseSchema as signAndSendTransactionResponseSchema, user_unsignedTransactionSchema as unsignedTransactionSchema };
}

declare const coreClientSchemas: readonly [zod.ZodObject<{
    type: zod.ZodLiteral<"lifecycle:init-request">;
    payload: zod.ZodObject<{
        version: zod.ZodString;
    }, "strip", zod.ZodTypeAny, {
        version: string;
    }, {
        version: string;
    }>;
}, zod.UnknownKeysParam, zod.ZodTypeAny, {
    type: "lifecycle:init-request";
    payload: {
        version: string;
    };
}, {
    type: "lifecycle:init-request";
    payload: {
        version: string;
    };
}>, zod.ZodObject<{
    type: zod.ZodLiteral<"user:initial-interaction-request">;
}, zod.UnknownKeysParam, zod.ZodTypeAny, {
    type: "user:initial-interaction-request";
}, {
    type: "user:initial-interaction-request";
}>, zod.ZodObject<{
    type: zod.ZodLiteral<"user:resize-request">;
    payload: zod.ZodObject<{
        width: zod.ZodNumber;
        height: zod.ZodNumber;
    }, "strip", zod.ZodTypeAny, {
        width: number;
        height: number;
    }, {
        width: number;
        height: number;
    }>;
}, zod.UnknownKeysParam, zod.ZodTypeAny, {
    type: "user:resize-request";
    payload: {
        width: number;
        height: number;
    };
}, {
    type: "user:resize-request";
    payload: {
        width: number;
        height: number;
    };
}>, zod.ZodObject<{
    type: zod.ZodLiteral<"user:connect-wallet-request">;
    payload: zod.ZodObject<{
        chainId: zod.ZodString;
    }, "strip", zod.ZodTypeAny, {
        chainId: string;
    }, {
        chainId: string;
    }>;
}, zod.UnknownKeysParam, zod.ZodTypeAny, {
    type: "user:connect-wallet-request";
    payload: {
        chainId: string;
    };
}, {
    type: "user:connect-wallet-request";
    payload: {
        chainId: string;
    };
}>, zod.ZodObject<{
    type: zod.ZodLiteral<"user:sign-send-transaction-request">;
    payload: zod.ZodObject<zod.objectUtil.extendShape<{
        unsignedTx: zod.ZodString;
        awaitCommitment: zod.ZodOptional<zod.ZodEnum<["confirmed", "finalized", "none"]>>;
    }, {
        chainId: zod.ZodString;
    }>, "strip", zod.ZodTypeAny, {
        chainId: string;
        unsignedTx: string;
        awaitCommitment?: "confirmed" | "finalized" | "none" | undefined;
    }, {
        chainId: string;
        unsignedTx: string;
        awaitCommitment?: "confirmed" | "finalized" | "none" | undefined;
    }>;
}, zod.UnknownKeysParam, zod.ZodTypeAny, {
    type: "user:sign-send-transaction-request";
    payload: {
        chainId: string;
        unsignedTx: string;
        awaitCommitment?: "confirmed" | "finalized" | "none" | undefined;
    };
}, {
    type: "user:sign-send-transaction-request";
    payload: {
        chainId: string;
        unsignedTx: string;
        awaitCommitment?: "confirmed" | "finalized" | "none" | undefined;
    };
}>, zod.ZodObject<{
    type: zod.ZodLiteral<"user:open-link-request">;
    payload: zod.ZodObject<{
        url: zod.ZodString;
    }, "strip", zod.ZodTypeAny, {
        url: string;
    }, {
        url: string;
    }>;
}, zod.UnknownKeysParam, zod.ZodTypeAny, {
    type: "user:open-link-request";
    payload: {
        url: string;
    };
}, {
    type: "user:open-link-request";
    payload: {
        url: string;
    };
}>, zod.ZodObject<{
    type: zod.ZodLiteral<"user:create-post-request">;
    payload: zod.ZodObject<{
        htmlContent: zod.ZodString;
    }, "strip", zod.ZodTypeAny, {
        htmlContent: string;
    }, {
        htmlContent: string;
    }>;
}, zod.UnknownKeysParam, zod.ZodTypeAny, {
    type: "user:create-post-request";
    payload: {
        htmlContent: string;
    };
}, {
    type: "user:create-post-request";
    payload: {
        htmlContent: string;
    };
}>, zod.ZodObject<{
    type: zod.ZodLiteral<"user:copy-to-clipboard-request">;
    payload: zod.ZodObject<{
        content: zod.ZodString;
    }, "strip", zod.ZodTypeAny, {
        content: string;
    }, {
        content: string;
    }>;
}, zod.UnknownKeysParam, zod.ZodTypeAny, {
    type: "user:copy-to-clipboard-request";
    payload: {
        content: string;
    };
}, {
    type: "user:copy-to-clipboard-request";
    payload: {
        content: string;
    };
}>];
declare const coreHostSchemas: readonly [zod.ZodObject<{
    type: zod.ZodLiteral<"lifecycle:init-response">;
    untrusted: zod.ZodObject<{
        user: zod.ZodOptional<zod.ZodObject<{
            id: zod.ZodString;
            username: zod.ZodString;
            avatar: zod.ZodOptional<zod.ZodString>;
        }, "strip", zod.ZodTypeAny, {
            id: string;
            username: string;
            avatar?: string | undefined;
        }, {
            id: string;
            username: string;
            avatar?: string | undefined;
        }>>;
        content: zod.ZodOptional<zod.ZodObject<{
            id: zod.ZodString;
            portalId: zod.ZodString;
            portalName: zod.ZodString;
        }, "strip", zod.ZodTypeAny, {
            id: string;
            portalId: string;
            portalName: string;
        }, {
            id: string;
            portalId: string;
            portalName: string;
        }>>;
    }, "strip", zod.ZodTypeAny, {
        user?: {
            id: string;
            username: string;
            avatar?: string | undefined;
        } | undefined;
        content?: {
            id: string;
            portalId: string;
            portalName: string;
        } | undefined;
    }, {
        user?: {
            id: string;
            username: string;
            avatar?: string | undefined;
        } | undefined;
        content?: {
            id: string;
            portalId: string;
            portalName: string;
        } | undefined;
    }>;
    trustedBytes: zod.ZodString;
}, zod.UnknownKeysParam, zod.ZodTypeAny, {
    type: "lifecycle:init-response";
    untrusted: {
        user?: {
            id: string;
            username: string;
            avatar?: string | undefined;
        } | undefined;
        content?: {
            id: string;
            portalId: string;
            portalName: string;
        } | undefined;
    };
    trustedBytes: string;
}, {
    type: "lifecycle:init-response";
    untrusted: {
        user?: {
            id: string;
            username: string;
            avatar?: string | undefined;
        } | undefined;
        content?: {
            id: string;
            portalId: string;
            portalName: string;
        } | undefined;
    };
    trustedBytes: string;
}>, zod.ZodObject<{
    type: zod.ZodLiteral<"lifecycle:close">;
    trustedBytes: zod.ZodString;
}, zod.UnknownKeysParam, zod.ZodTypeAny, {
    type: "lifecycle:close";
    trustedBytes: string;
}, {
    type: "lifecycle:close";
    trustedBytes: string;
}>, zod.ZodObject<{
    type: zod.ZodLiteral<"user:connect-wallet-response">;
    untrusted: zod.ZodUnion<[zod.ZodObject<{
        success: zod.ZodLiteral<true>;
        address: zod.ZodString;
        walletName: zod.ZodString;
        walletIcon: zod.ZodString;
        walletUrl: zod.ZodString;
        walletSupportedTransactionVersions: zod.ZodOptional<zod.ZodType<ReadonlySet<0 | "legacy">, zod.ZodTypeDef, ReadonlySet<0 | "legacy">>>;
    }, "strip", zod.ZodTypeAny, {
        success: true;
        address: string;
        walletName: string;
        walletIcon: string;
        walletUrl: string;
        walletSupportedTransactionVersions?: ReadonlySet<0 | "legacy"> | undefined;
    }, {
        success: true;
        address: string;
        walletName: string;
        walletIcon: string;
        walletUrl: string;
        walletSupportedTransactionVersions?: ReadonlySet<0 | "legacy"> | undefined;
    }>, zod.ZodObject<{
        success: zod.ZodLiteral<false>;
        errorReason: zod.ZodEnum<["user-cancelled", "error"]>;
        error: zod.ZodOptional<zod.ZodString>;
    }, "strip", zod.ZodTypeAny, {
        success: false;
        errorReason: "error" | "user-cancelled";
        error?: string | undefined;
    }, {
        success: false;
        errorReason: "error" | "user-cancelled";
        error?: string | undefined;
    }>]>;
    trustedBytes: zod.ZodString;
}, zod.UnknownKeysParam, zod.ZodTypeAny, {
    type: "user:connect-wallet-response";
    untrusted: {
        success: true;
        address: string;
        walletName: string;
        walletIcon: string;
        walletUrl: string;
        walletSupportedTransactionVersions?: ReadonlySet<0 | "legacy"> | undefined;
    } | {
        success: false;
        errorReason: "error" | "user-cancelled";
        error?: string | undefined;
    };
    trustedBytes: string;
}, {
    type: "user:connect-wallet-response";
    untrusted: {
        success: true;
        address: string;
        walletName: string;
        walletIcon: string;
        walletUrl: string;
        walletSupportedTransactionVersions?: ReadonlySet<0 | "legacy"> | undefined;
    } | {
        success: false;
        errorReason: "error" | "user-cancelled";
        error?: string | undefined;
    };
    trustedBytes: string;
}>, zod.ZodObject<{
    type: zod.ZodLiteral<"user:sign-send-transaction-response">;
    untrusted: zod.ZodUnion<[zod.ZodObject<{
        success: zod.ZodLiteral<true>;
        signedTx: zod.ZodString;
    }, "strip", zod.ZodTypeAny, {
        success: true;
        signedTx: string;
    }, {
        success: true;
        signedTx: string;
    }>, zod.ZodObject<{
        success: zod.ZodLiteral<false>;
        errorReason: zod.ZodEnum<["user-cancelled", "error"]>;
        error: zod.ZodOptional<zod.ZodString>;
    }, "strip", zod.ZodTypeAny, {
        success: false;
        errorReason: "error" | "user-cancelled";
        error?: string | undefined;
    }, {
        success: false;
        errorReason: "error" | "user-cancelled";
        error?: string | undefined;
    }>]>;
    trustedBytes: zod.ZodString;
}, zod.UnknownKeysParam, zod.ZodTypeAny, {
    type: "user:sign-send-transaction-response";
    untrusted: {
        success: false;
        errorReason: "error" | "user-cancelled";
        error?: string | undefined;
    } | {
        success: true;
        signedTx: string;
    };
    trustedBytes: string;
}, {
    type: "user:sign-send-transaction-response";
    untrusted: {
        success: false;
        errorReason: "error" | "user-cancelled";
        error?: string | undefined;
    } | {
        success: true;
        signedTx: string;
    };
    trustedBytes: string;
}>, zod.ZodObject<{
    type: zod.ZodLiteral<"user:create-post-response">;
    untrusted: zod.ZodUnion<[zod.ZodObject<{
        success: zod.ZodLiteral<true>;
        contentId: zod.ZodBigInt;
    }, "strip", zod.ZodTypeAny, {
        success: true;
        contentId: bigint;
    }, {
        success: true;
        contentId: bigint;
    }>, zod.ZodObject<{
        success: zod.ZodLiteral<false>;
        errorReason: zod.ZodEnum<["user-cancelled", "error"]>;
        error: zod.ZodOptional<zod.ZodString>;
    }, "strip", zod.ZodTypeAny, {
        success: false;
        errorReason: "error" | "user-cancelled";
        error?: string | undefined;
    }, {
        success: false;
        errorReason: "error" | "user-cancelled";
        error?: string | undefined;
    }>]>;
    trustedBytes: zod.ZodString;
}, zod.UnknownKeysParam, zod.ZodTypeAny, {
    type: "user:create-post-response";
    untrusted: {
        success: false;
        errorReason: "error" | "user-cancelled";
        error?: string | undefined;
    } | {
        success: true;
        contentId: bigint;
    };
    trustedBytes: string;
}, {
    type: "user:create-post-response";
    untrusted: {
        success: false;
        errorReason: "error" | "user-cancelled";
        error?: string | undefined;
    } | {
        success: true;
        contentId: bigint;
    };
    trustedBytes: string;
}>, zod.ZodObject<{
    type: zod.ZodLiteral<"user:copy-to-clipboard-response">;
    untrusted: zod.ZodUnion<[zod.ZodObject<{
        success: zod.ZodLiteral<true>;
    }, "strip", zod.ZodTypeAny, {
        success: true;
    }, {
        success: true;
    }>, zod.ZodObject<{
        success: zod.ZodLiteral<false>;
        errorReason: zod.ZodEnum<["user-cancelled", "error"]>;
        error: zod.ZodOptional<zod.ZodString>;
    }, "strip", zod.ZodTypeAny, {
        success: false;
        errorReason: "error" | "user-cancelled";
        error?: string | undefined;
    }, {
        success: false;
        errorReason: "error" | "user-cancelled";
        error?: string | undefined;
    }>]>;
    trustedBytes: zod.ZodString;
}, zod.UnknownKeysParam, zod.ZodTypeAny, {
    type: "user:copy-to-clipboard-response";
    untrusted: {
        success: false;
        errorReason: "error" | "user-cancelled";
        error?: string | undefined;
    } | {
        success: true;
    };
    trustedBytes: string;
}, {
    type: "user:copy-to-clipboard-response";
    untrusted: {
        success: false;
        errorReason: "error" | "user-cancelled";
        error?: string | undefined;
    } | {
        success: true;
    };
    trustedBytes: string;
}>, zod.ZodObject<{
    type: zod.ZodLiteral<"user:content-reaction-response">;
    untrusted: zod.ZodUnion<[zod.ZodObject<{
        status: zod.ZodLiteral<"reacted">;
        reaction: zod.ZodString;
    }, "strip", zod.ZodTypeAny, {
        status: "reacted";
        reaction: string;
    }, {
        status: "reacted";
        reaction: string;
    }>, zod.ZodObject<{
        status: zod.ZodLiteral<"cleared">;
    }, "strip", zod.ZodTypeAny, {
        status: "cleared";
    }, {
        status: "cleared";
    }>]>;
    trustedBytes: zod.ZodString;
}, zod.UnknownKeysParam, zod.ZodTypeAny, {
    type: "user:content-reaction-response";
    untrusted: {
        status: "reacted";
        reaction: string;
    } | {
        status: "cleared";
    };
    trustedBytes: string;
}, {
    type: "user:content-reaction-response";
    untrusted: {
        status: "reacted";
        reaction: string;
    } | {
        status: "cleared";
    };
    trustedBytes: string;
}>];
type CoreClientMessageSchema = (typeof coreClientSchemas)[number];
type CoreHostMessageSchema = (typeof coreHostSchemas)[number];
type CoreClientMessage = BaseClientMessage<CoreClientMessageSchema>;
type CoreHostMessage = BaseHostMessage<CoreHostMessageSchema>;
type CoreClientMessageType = CoreClientMessage['type'];
type CoreHostMessageType = CoreHostMessage['type'];
declare const parseCoreClientMessage: (message: unknown) => CoreClientMessage | undefined;
declare const parseCoreHostMessage: (message: unknown) => CoreHostMessage | undefined;

declare class ClientAlreadyInitializedError extends Error {
    name: string;
    message: string;
}
declare class ClientNotInitializedError extends Error {
    name: string;
    message: string;
}
declare class WindowNotDefinedError extends Error {
    name: string;
    message: string;
}
declare class ReferrerNotDefinedError extends Error {
    name: string;
    message: string;
}

declare const VERSION = "vNext";

export { type BaseClientMessage, type BaseClientMessageSchema, type BaseHostMessage, type BaseHostMessageSchema, ClientAlreadyInitializedError, ClientNotInitializedError, type CoreClientMessage, type CoreClientMessageSchema, type CoreClientMessageType, type CoreHostMessage, type CoreHostMessageSchema, type CoreHostMessageType, lifecycle as Lifecycle, ReferrerNotDefinedError, user as User, VERSION, WindowNotDefinedError, createClientMessageSchema, createFailedResponsePayload, createHostMessageSchema, parseBaseClientMessage, parseBaseHostMessage, parseCoreClientMessage, parseCoreHostMessage };
