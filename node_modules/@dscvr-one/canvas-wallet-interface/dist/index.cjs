"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  disconnectRequestSchema: () => disconnectRequestSchema,
  disconnectResponseSchema: () => disconnectResponseSchema,
  parseClientMessage: () => parseClientMessage,
  parseCoreHostMessage: () => parseCoreHostMessage,
  sendTransactionRequestSchema: () => sendTransactionRequestSchema,
  sendTransactionResponseSchema: () => sendTransactionResponseSchema,
  signAllTransactionsRequestSchema: () => signAllTransactionsRequestSchema,
  signAllTransactionsResponseSchema: () => signAllTransactionsResponseSchema,
  signMessageRequestSchema: () => signMessageRequestSchema,
  signMessageResponseSchema: () => signMessageResponseSchema,
  signTransactionRequestSchema: () => signTransactionRequestSchema,
  signTransactionResponseSchema: () => signTransactionResponseSchema,
  walletNameSchema: () => walletNameSchema,
  walletSchema: () => walletSchema
});
module.exports = __toCommonJS(src_exports);

// src/schema/index.ts
var zod2 = __toESM(require("zod"), 1);

// src/schema/schema.ts
var zod = __toESM(require("zod"), 1);
var import_canvas_interface = require("@dscvr-one/canvas-interface");
var walletNameSchema = zod.object({
  name: zod.string()
});
var walletSchema = zod.object({
  name: zod.string(),
  icon: zod.string(),
  url: zod.string(),
  supportedTransactionVersions: zod.custom()
});
var createFailedWalletResponse = () => walletNameSchema.and(
  (0, import_canvas_interface.createFailedResponsePayload)(["user-cancelled", "error"])
);
var disconnectRequestSchema = (0, import_canvas_interface.createClientMessageSchema)(
  "wallet:disconnect-request",
  walletNameSchema
);
var disconnectResponseSchema = (0, import_canvas_interface.createHostMessageSchema)(
  "wallet:disconnect-response",
  zod.union([
    walletNameSchema.extend({
      success: zod.literal(true)
    }),
    walletNameSchema.and((0, import_canvas_interface.createFailedResponsePayload)(["error"]))
  ])
);
var sendTransactionRequestSchema = (0, import_canvas_interface.createClientMessageSchema)(
  "wallet:send-transaction-request",
  walletNameSchema.extend({
    rpcEndpoint: zod.string(),
    unsignedTx: zod.string(),
    chain: zod.string().optional(),
    options: zod.custom().optional()
  })
);
var sendTransactionResponseSchema = (0, import_canvas_interface.createHostMessageSchema)(
  "wallet:send-transaction-response",
  zod.union([
    walletNameSchema.extend({
      success: zod.literal(true),
      signedTx: zod.string()
    }),
    createFailedWalletResponse()
  ])
);
var signTransactionRequestSchema = (0, import_canvas_interface.createClientMessageSchema)(
  "wallet:sign-transaction-request",
  walletNameSchema.extend({
    unsignedTx: zod.string(),
    chain: zod.string().optional()
  })
);
var signTransactionResponseSchema = (0, import_canvas_interface.createHostMessageSchema)(
  "wallet:sign-transaction-response",
  zod.union([
    walletNameSchema.extend({
      success: zod.literal(true),
      signedTx: zod.string()
    }),
    createFailedWalletResponse()
  ])
);
var signAllTransactionsRequestSchema = (0, import_canvas_interface.createClientMessageSchema)(
  "wallet:sign-all-transactions-request",
  walletNameSchema.extend({
    unsignedTxs: zod.array(zod.string())
  })
);
var signAllTransactionsResponseSchema = (0, import_canvas_interface.createHostMessageSchema)(
  "wallet:sign-all-transactions-response",
  zod.union([
    walletNameSchema.extend({
      success: zod.literal(true),
      signedTxs: zod.array(zod.string())
    }),
    createFailedWalletResponse()
  ])
);
var signMessageRequestSchema = (0, import_canvas_interface.createClientMessageSchema)(
  "wallet:sign-message-request",
  walletNameSchema.extend({
    unsignedMessage: zod.custom()
  })
);
var signMessageResponseSchema = (0, import_canvas_interface.createHostMessageSchema)(
  "wallet:sign-message-response",
  zod.union([
    walletNameSchema.extend({
      success: zod.literal(true),
      signedMessage: zod.custom()
    }),
    createFailedWalletResponse()
  ])
);

// src/schema/index.ts
var clientSchemas = [
  disconnectRequestSchema,
  sendTransactionRequestSchema,
  signTransactionRequestSchema,
  signAllTransactionsRequestSchema,
  signMessageRequestSchema
];
var hostSchemas = [
  disconnectResponseSchema,
  sendTransactionResponseSchema,
  signTransactionResponseSchema,
  signAllTransactionsResponseSchema,
  signMessageResponseSchema
];
var parseClientMessage = (message) => {
  const schema = zod2.union(clientSchemas);
  const parsedMessage = schema.safeParse(message);
  if (!parsedMessage.success) {
    return void 0;
  }
  return parsedMessage.data;
};
var parseCoreHostMessage = (message) => {
  const schema = zod2.union(hostSchemas);
  const parsedMessage = schema.safeParse(message);
  if (!parsedMessage.success) {
    return void 0;
  }
  return parsedMessage.data;
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  disconnectRequestSchema,
  disconnectResponseSchema,
  parseClientMessage,
  parseCoreHostMessage,
  sendTransactionRequestSchema,
  sendTransactionResponseSchema,
  signAllTransactionsRequestSchema,
  signAllTransactionsResponseSchema,
  signMessageRequestSchema,
  signMessageResponseSchema,
  signTransactionRequestSchema,
  signTransactionResponseSchema,
  walletNameSchema,
  walletSchema
});
//# sourceMappingURL=index.cjs.map