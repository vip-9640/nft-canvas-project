// src/schema/index.ts
import * as zod2 from "zod";

// src/schema/schema.ts
import * as zod from "zod";
import {
  createClientMessageSchema,
  createFailedResponsePayload,
  createHostMessageSchema
} from "@dscvr-one/canvas-interface";
var walletNameSchema = zod.object({
  name: zod.string()
});
var walletSchema = zod.object({
  name: zod.string(),
  icon: zod.string(),
  url: zod.string(),
  supportedTransactionVersions: zod.custom()
});
var createFailedWalletResponse = () => walletNameSchema.and(
  createFailedResponsePayload(["user-cancelled", "error"])
);
var disconnectRequestSchema = createClientMessageSchema(
  "wallet:disconnect-request",
  walletNameSchema
);
var disconnectResponseSchema = createHostMessageSchema(
  "wallet:disconnect-response",
  zod.union([
    walletNameSchema.extend({
      success: zod.literal(true)
    }),
    walletNameSchema.and(createFailedResponsePayload(["error"]))
  ])
);
var sendTransactionRequestSchema = createClientMessageSchema(
  "wallet:send-transaction-request",
  walletNameSchema.extend({
    rpcEndpoint: zod.string(),
    unsignedTx: zod.string(),
    chain: zod.string().optional(),
    options: zod.custom().optional()
  })
);
var sendTransactionResponseSchema = createHostMessageSchema(
  "wallet:send-transaction-response",
  zod.union([
    walletNameSchema.extend({
      success: zod.literal(true),
      signedTx: zod.string()
    }),
    createFailedWalletResponse()
  ])
);
var signTransactionRequestSchema = createClientMessageSchema(
  "wallet:sign-transaction-request",
  walletNameSchema.extend({
    unsignedTx: zod.string(),
    chain: zod.string().optional()
  })
);
var signTransactionResponseSchema = createHostMessageSchema(
  "wallet:sign-transaction-response",
  zod.union([
    walletNameSchema.extend({
      success: zod.literal(true),
      signedTx: zod.string()
    }),
    createFailedWalletResponse()
  ])
);
var signAllTransactionsRequestSchema = createClientMessageSchema(
  "wallet:sign-all-transactions-request",
  walletNameSchema.extend({
    unsignedTxs: zod.array(zod.string())
  })
);
var signAllTransactionsResponseSchema = createHostMessageSchema(
  "wallet:sign-all-transactions-response",
  zod.union([
    walletNameSchema.extend({
      success: zod.literal(true),
      signedTxs: zod.array(zod.string())
    }),
    createFailedWalletResponse()
  ])
);
var signMessageRequestSchema = createClientMessageSchema(
  "wallet:sign-message-request",
  walletNameSchema.extend({
    unsignedMessage: zod.custom()
  })
);
var signMessageResponseSchema = createHostMessageSchema(
  "wallet:sign-message-response",
  zod.union([
    walletNameSchema.extend({
      success: zod.literal(true),
      signedMessage: zod.custom()
    }),
    createFailedWalletResponse()
  ])
);

// src/schema/index.ts
var clientSchemas = [
  disconnectRequestSchema,
  sendTransactionRequestSchema,
  signTransactionRequestSchema,
  signAllTransactionsRequestSchema,
  signMessageRequestSchema
];
var hostSchemas = [
  disconnectResponseSchema,
  sendTransactionResponseSchema,
  signTransactionResponseSchema,
  signAllTransactionsResponseSchema,
  signMessageResponseSchema
];
var parseClientMessage = (message) => {
  const schema = zod2.union(clientSchemas);
  const parsedMessage = schema.safeParse(message);
  if (!parsedMessage.success) {
    return void 0;
  }
  return parsedMessage.data;
};
var parseCoreHostMessage = (message) => {
  const schema = zod2.union(hostSchemas);
  const parsedMessage = schema.safeParse(message);
  if (!parsedMessage.success) {
    return void 0;
  }
  return parsedMessage.data;
};
export {
  disconnectRequestSchema,
  disconnectResponseSchema,
  parseClientMessage,
  parseCoreHostMessage,
  sendTransactionRequestSchema,
  sendTransactionResponseSchema,
  signAllTransactionsRequestSchema,
  signAllTransactionsResponseSchema,
  signMessageRequestSchema,
  signMessageResponseSchema,
  signTransactionRequestSchema,
  signTransactionResponseSchema,
  walletNameSchema,
  walletSchema
};
//# sourceMappingURL=index.js.map