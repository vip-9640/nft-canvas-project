import * as _solana_wallet_adapter_base from '@solana/wallet-adapter-base';
import { SupportedTransactionVersions, SendTransactionOptions } from '@solana/wallet-adapter-base';
import * as zod from 'zod';
import { BaseClientMessage, BaseHostMessage } from '@dscvr-one/canvas-interface';

declare const walletNameSchema: zod.ZodObject<{
    name: zod.ZodString;
}, "strip", zod.ZodTypeAny, {
    name: string;
}, {
    name: string;
}>;
declare const walletSchema: zod.ZodObject<{
    name: zod.ZodString;
    icon: zod.ZodString;
    url: zod.ZodString;
    supportedTransactionVersions: zod.ZodType<SupportedTransactionVersions, zod.ZodTypeDef, SupportedTransactionVersions>;
}, "strip", zod.ZodTypeAny, {
    url: string;
    name: string;
    icon: string;
    supportedTransactionVersions?: SupportedTransactionVersions;
}, {
    url: string;
    name: string;
    icon: string;
    supportedTransactionVersions?: SupportedTransactionVersions;
}>;
declare const disconnectRequestSchema: zod.ZodObject<{
    type: zod.ZodLiteral<"wallet:disconnect-request">;
    payload: zod.ZodObject<{
        name: zod.ZodString;
    }, "strip", zod.ZodTypeAny, {
        name: string;
    }, {
        name: string;
    }>;
}, zod.UnknownKeysParam, zod.ZodTypeAny, {
    type: "wallet:disconnect-request";
    payload: {
        name: string;
    };
}, {
    type: "wallet:disconnect-request";
    payload: {
        name: string;
    };
}>;
declare const disconnectResponseSchema: zod.ZodObject<{
    type: zod.ZodLiteral<"wallet:disconnect-response">;
    untrusted: zod.ZodUnion<[zod.ZodObject<zod.objectUtil.extendShape<{
        name: zod.ZodString;
    }, {
        success: zod.ZodLiteral<true>;
    }>, "strip", zod.ZodTypeAny, {
        success: true;
        name: string;
    }, {
        success: true;
        name: string;
    }>, zod.ZodIntersection<zod.ZodObject<{
        name: zod.ZodString;
    }, "strip", zod.ZodTypeAny, {
        name: string;
    }, {
        name: string;
    }>, zod.ZodObject<{
        success: zod.ZodLiteral<false>;
        errorReason: zod.ZodEnum<["error"]>;
        error: zod.ZodOptional<zod.ZodString>;
    }, "strip", zod.ZodTypeAny, {
        success: false;
        errorReason: "error";
        error?: string | undefined;
    }, {
        success: false;
        errorReason: "error";
        error?: string | undefined;
    }>>]>;
    trustedBytes: zod.ZodString;
}, zod.UnknownKeysParam, zod.ZodTypeAny, {
    type: "wallet:disconnect-response";
    untrusted: {
        success: true;
        name: string;
    } | ({
        name: string;
    } & {
        success: false;
        errorReason: "error";
        error?: string | undefined;
    });
    trustedBytes: string;
}, {
    type: "wallet:disconnect-response";
    untrusted: {
        success: true;
        name: string;
    } | ({
        name: string;
    } & {
        success: false;
        errorReason: "error";
        error?: string | undefined;
    });
    trustedBytes: string;
}>;
declare const sendTransactionRequestSchema: zod.ZodObject<{
    type: zod.ZodLiteral<"wallet:send-transaction-request">;
    payload: zod.ZodObject<zod.objectUtil.extendShape<{
        name: zod.ZodString;
    }, {
        rpcEndpoint: zod.ZodString;
        unsignedTx: zod.ZodString;
        chain: zod.ZodOptional<zod.ZodString>;
        options: zod.ZodOptional<zod.ZodType<SendTransactionOptions, zod.ZodTypeDef, SendTransactionOptions>>;
    }>, "strip", zod.ZodTypeAny, {
        unsignedTx: string;
        name: string;
        rpcEndpoint: string;
        options?: SendTransactionOptions | undefined;
        chain?: string | undefined;
    }, {
        unsignedTx: string;
        name: string;
        rpcEndpoint: string;
        options?: SendTransactionOptions | undefined;
        chain?: string | undefined;
    }>;
}, zod.UnknownKeysParam, zod.ZodTypeAny, {
    type: "wallet:send-transaction-request";
    payload: {
        unsignedTx: string;
        name: string;
        rpcEndpoint: string;
        options?: SendTransactionOptions | undefined;
        chain?: string | undefined;
    };
}, {
    type: "wallet:send-transaction-request";
    payload: {
        unsignedTx: string;
        name: string;
        rpcEndpoint: string;
        options?: SendTransactionOptions | undefined;
        chain?: string | undefined;
    };
}>;
declare const sendTransactionResponseSchema: zod.ZodObject<{
    type: zod.ZodLiteral<"wallet:send-transaction-response">;
    untrusted: zod.ZodUnion<[zod.ZodObject<zod.objectUtil.extendShape<{
        name: zod.ZodString;
    }, {
        success: zod.ZodLiteral<true>;
        signedTx: zod.ZodString;
    }>, "strip", zod.ZodTypeAny, {
        success: true;
        signedTx: string;
        name: string;
    }, {
        success: true;
        signedTx: string;
        name: string;
    }>, zod.ZodIntersection<zod.ZodObject<{
        name: zod.ZodString;
    }, "strip", zod.ZodTypeAny, {
        name: string;
    }, {
        name: string;
    }>, zod.ZodObject<{
        success: zod.ZodLiteral<false>;
        errorReason: zod.ZodEnum<["user-cancelled", "error"]>;
        error: zod.ZodOptional<zod.ZodString>;
    }, "strip", zod.ZodTypeAny, {
        success: false;
        errorReason: "error" | "user-cancelled";
        error?: string | undefined;
    }, {
        success: false;
        errorReason: "error" | "user-cancelled";
        error?: string | undefined;
    }>>]>;
    trustedBytes: zod.ZodString;
}, zod.UnknownKeysParam, zod.ZodTypeAny, {
    type: "wallet:send-transaction-response";
    untrusted: {
        success: true;
        signedTx: string;
        name: string;
    } | ({
        name: string;
    } & {
        success: false;
        errorReason: "error" | "user-cancelled";
        error?: string | undefined;
    });
    trustedBytes: string;
}, {
    type: "wallet:send-transaction-response";
    untrusted: {
        success: true;
        signedTx: string;
        name: string;
    } | ({
        name: string;
    } & {
        success: false;
        errorReason: "error" | "user-cancelled";
        error?: string | undefined;
    });
    trustedBytes: string;
}>;
declare const signTransactionRequestSchema: zod.ZodObject<{
    type: zod.ZodLiteral<"wallet:sign-transaction-request">;
    payload: zod.ZodObject<zod.objectUtil.extendShape<{
        name: zod.ZodString;
    }, {
        unsignedTx: zod.ZodString;
        chain: zod.ZodOptional<zod.ZodString>;
    }>, "strip", zod.ZodTypeAny, {
        unsignedTx: string;
        name: string;
        chain?: string | undefined;
    }, {
        unsignedTx: string;
        name: string;
        chain?: string | undefined;
    }>;
}, zod.UnknownKeysParam, zod.ZodTypeAny, {
    type: "wallet:sign-transaction-request";
    payload: {
        unsignedTx: string;
        name: string;
        chain?: string | undefined;
    };
}, {
    type: "wallet:sign-transaction-request";
    payload: {
        unsignedTx: string;
        name: string;
        chain?: string | undefined;
    };
}>;
declare const signTransactionResponseSchema: zod.ZodObject<{
    type: zod.ZodLiteral<"wallet:sign-transaction-response">;
    untrusted: zod.ZodUnion<[zod.ZodObject<zod.objectUtil.extendShape<{
        name: zod.ZodString;
    }, {
        success: zod.ZodLiteral<true>;
        signedTx: zod.ZodString;
    }>, "strip", zod.ZodTypeAny, {
        success: true;
        signedTx: string;
        name: string;
    }, {
        success: true;
        signedTx: string;
        name: string;
    }>, zod.ZodIntersection<zod.ZodObject<{
        name: zod.ZodString;
    }, "strip", zod.ZodTypeAny, {
        name: string;
    }, {
        name: string;
    }>, zod.ZodObject<{
        success: zod.ZodLiteral<false>;
        errorReason: zod.ZodEnum<["user-cancelled", "error"]>;
        error: zod.ZodOptional<zod.ZodString>;
    }, "strip", zod.ZodTypeAny, {
        success: false;
        errorReason: "error" | "user-cancelled";
        error?: string | undefined;
    }, {
        success: false;
        errorReason: "error" | "user-cancelled";
        error?: string | undefined;
    }>>]>;
    trustedBytes: zod.ZodString;
}, zod.UnknownKeysParam, zod.ZodTypeAny, {
    type: "wallet:sign-transaction-response";
    untrusted: ({
        name: string;
    } & {
        success: false;
        errorReason: "error" | "user-cancelled";
        error?: string | undefined;
    }) | {
        success: true;
        signedTx: string;
        name: string;
    };
    trustedBytes: string;
}, {
    type: "wallet:sign-transaction-response";
    untrusted: ({
        name: string;
    } & {
        success: false;
        errorReason: "error" | "user-cancelled";
        error?: string | undefined;
    }) | {
        success: true;
        signedTx: string;
        name: string;
    };
    trustedBytes: string;
}>;
declare const signAllTransactionsRequestSchema: zod.ZodObject<{
    type: zod.ZodLiteral<"wallet:sign-all-transactions-request">;
    payload: zod.ZodObject<zod.objectUtil.extendShape<{
        name: zod.ZodString;
    }, {
        unsignedTxs: zod.ZodArray<zod.ZodString, "many">;
    }>, "strip", zod.ZodTypeAny, {
        name: string;
        unsignedTxs: string[];
    }, {
        name: string;
        unsignedTxs: string[];
    }>;
}, zod.UnknownKeysParam, zod.ZodTypeAny, {
    type: "wallet:sign-all-transactions-request";
    payload: {
        name: string;
        unsignedTxs: string[];
    };
}, {
    type: "wallet:sign-all-transactions-request";
    payload: {
        name: string;
        unsignedTxs: string[];
    };
}>;
declare const signAllTransactionsResponseSchema: zod.ZodObject<{
    type: zod.ZodLiteral<"wallet:sign-all-transactions-response">;
    untrusted: zod.ZodUnion<[zod.ZodObject<zod.objectUtil.extendShape<{
        name: zod.ZodString;
    }, {
        success: zod.ZodLiteral<true>;
        signedTxs: zod.ZodArray<zod.ZodString, "many">;
    }>, "strip", zod.ZodTypeAny, {
        success: true;
        name: string;
        signedTxs: string[];
    }, {
        success: true;
        name: string;
        signedTxs: string[];
    }>, zod.ZodIntersection<zod.ZodObject<{
        name: zod.ZodString;
    }, "strip", zod.ZodTypeAny, {
        name: string;
    }, {
        name: string;
    }>, zod.ZodObject<{
        success: zod.ZodLiteral<false>;
        errorReason: zod.ZodEnum<["user-cancelled", "error"]>;
        error: zod.ZodOptional<zod.ZodString>;
    }, "strip", zod.ZodTypeAny, {
        success: false;
        errorReason: "error" | "user-cancelled";
        error?: string | undefined;
    }, {
        success: false;
        errorReason: "error" | "user-cancelled";
        error?: string | undefined;
    }>>]>;
    trustedBytes: zod.ZodString;
}, zod.UnknownKeysParam, zod.ZodTypeAny, {
    type: "wallet:sign-all-transactions-response";
    untrusted: ({
        name: string;
    } & {
        success: false;
        errorReason: "error" | "user-cancelled";
        error?: string | undefined;
    }) | {
        success: true;
        name: string;
        signedTxs: string[];
    };
    trustedBytes: string;
}, {
    type: "wallet:sign-all-transactions-response";
    untrusted: ({
        name: string;
    } & {
        success: false;
        errorReason: "error" | "user-cancelled";
        error?: string | undefined;
    }) | {
        success: true;
        name: string;
        signedTxs: string[];
    };
    trustedBytes: string;
}>;
declare const signMessageRequestSchema: zod.ZodObject<{
    type: zod.ZodLiteral<"wallet:sign-message-request">;
    payload: zod.ZodObject<zod.objectUtil.extendShape<{
        name: zod.ZodString;
    }, {
        unsignedMessage: zod.ZodType<Uint8Array, zod.ZodTypeDef, Uint8Array>;
    }>, "strip", zod.ZodTypeAny, {
        name: string;
        unsignedMessage: Uint8Array;
    }, {
        name: string;
        unsignedMessage: Uint8Array;
    }>;
}, zod.UnknownKeysParam, zod.ZodTypeAny, {
    type: "wallet:sign-message-request";
    payload: {
        name: string;
        unsignedMessage: Uint8Array;
    };
}, {
    type: "wallet:sign-message-request";
    payload: {
        name: string;
        unsignedMessage: Uint8Array;
    };
}>;
declare const signMessageResponseSchema: zod.ZodObject<{
    type: zod.ZodLiteral<"wallet:sign-message-response">;
    untrusted: zod.ZodUnion<[zod.ZodObject<zod.objectUtil.extendShape<{
        name: zod.ZodString;
    }, {
        success: zod.ZodLiteral<true>;
        signedMessage: zod.ZodType<Uint8Array, zod.ZodTypeDef, Uint8Array>;
    }>, "strip", zod.ZodTypeAny, {
        success: true;
        name: string;
        signedMessage: Uint8Array;
    }, {
        success: true;
        name: string;
        signedMessage: Uint8Array;
    }>, zod.ZodIntersection<zod.ZodObject<{
        name: zod.ZodString;
    }, "strip", zod.ZodTypeAny, {
        name: string;
    }, {
        name: string;
    }>, zod.ZodObject<{
        success: zod.ZodLiteral<false>;
        errorReason: zod.ZodEnum<["user-cancelled", "error"]>;
        error: zod.ZodOptional<zod.ZodString>;
    }, "strip", zod.ZodTypeAny, {
        success: false;
        errorReason: "error" | "user-cancelled";
        error?: string | undefined;
    }, {
        success: false;
        errorReason: "error" | "user-cancelled";
        error?: string | undefined;
    }>>]>;
    trustedBytes: zod.ZodString;
}, zod.UnknownKeysParam, zod.ZodTypeAny, {
    type: "wallet:sign-message-response";
    untrusted: ({
        name: string;
    } & {
        success: false;
        errorReason: "error" | "user-cancelled";
        error?: string | undefined;
    }) | {
        success: true;
        name: string;
        signedMessage: Uint8Array;
    };
    trustedBytes: string;
}, {
    type: "wallet:sign-message-response";
    untrusted: ({
        name: string;
    } & {
        success: false;
        errorReason: "error" | "user-cancelled";
        error?: string | undefined;
    }) | {
        success: true;
        name: string;
        signedMessage: Uint8Array;
    };
    trustedBytes: string;
}>;
interface Wallet extends zod.infer<typeof walletSchema> {
}
interface DisconnectRequest extends BaseClientMessage<typeof disconnectRequestSchema> {
}
interface DisconnectResponse extends BaseHostMessage<typeof disconnectResponseSchema> {
}
interface SendTransactionRequest extends BaseClientMessage<typeof sendTransactionRequestSchema> {
}
interface SendTransactionResponse extends BaseHostMessage<typeof sendTransactionResponseSchema> {
}
interface SignTransactionRequest extends BaseClientMessage<typeof signTransactionRequestSchema> {
}
interface SignTransactionResponse extends BaseHostMessage<typeof signTransactionResponseSchema> {
}
interface SignAllTransactionsRequest extends BaseClientMessage<typeof signAllTransactionsRequestSchema> {
}
interface SignAllTransactionsResponse extends BaseHostMessage<typeof signAllTransactionsResponseSchema> {
}
interface SignMessageRequest extends BaseClientMessage<typeof signMessageRequestSchema> {
}
interface SignMessageResponse extends BaseHostMessage<typeof signMessageResponseSchema> {
}

declare const clientSchemas: readonly [zod.ZodObject<{
    type: zod.ZodLiteral<"wallet:disconnect-request">;
    payload: zod.ZodObject<{
        name: zod.ZodString;
    }, "strip", zod.ZodTypeAny, {
        name: string;
    }, {
        name: string;
    }>;
}, zod.UnknownKeysParam, zod.ZodTypeAny, {
    type: "wallet:disconnect-request";
    payload: {
        name: string;
    };
}, {
    type: "wallet:disconnect-request";
    payload: {
        name: string;
    };
}>, zod.ZodObject<{
    type: zod.ZodLiteral<"wallet:send-transaction-request">;
    payload: zod.ZodObject<zod.objectUtil.extendShape<{
        name: zod.ZodString;
    }, {
        rpcEndpoint: zod.ZodString;
        unsignedTx: zod.ZodString;
        chain: zod.ZodOptional<zod.ZodString>;
        options: zod.ZodOptional<zod.ZodType<_solana_wallet_adapter_base.SendTransactionOptions, zod.ZodTypeDef, _solana_wallet_adapter_base.SendTransactionOptions>>;
    }>, "strip", zod.ZodTypeAny, {
        unsignedTx: string;
        name: string;
        rpcEndpoint: string;
        options?: _solana_wallet_adapter_base.SendTransactionOptions | undefined;
        chain?: string | undefined;
    }, {
        unsignedTx: string;
        name: string;
        rpcEndpoint: string;
        options?: _solana_wallet_adapter_base.SendTransactionOptions | undefined;
        chain?: string | undefined;
    }>;
}, zod.UnknownKeysParam, zod.ZodTypeAny, {
    type: "wallet:send-transaction-request";
    payload: {
        unsignedTx: string;
        name: string;
        rpcEndpoint: string;
        options?: _solana_wallet_adapter_base.SendTransactionOptions | undefined;
        chain?: string | undefined;
    };
}, {
    type: "wallet:send-transaction-request";
    payload: {
        unsignedTx: string;
        name: string;
        rpcEndpoint: string;
        options?: _solana_wallet_adapter_base.SendTransactionOptions | undefined;
        chain?: string | undefined;
    };
}>, zod.ZodObject<{
    type: zod.ZodLiteral<"wallet:sign-transaction-request">;
    payload: zod.ZodObject<zod.objectUtil.extendShape<{
        name: zod.ZodString;
    }, {
        unsignedTx: zod.ZodString;
        chain: zod.ZodOptional<zod.ZodString>;
    }>, "strip", zod.ZodTypeAny, {
        unsignedTx: string;
        name: string;
        chain?: string | undefined;
    }, {
        unsignedTx: string;
        name: string;
        chain?: string | undefined;
    }>;
}, zod.UnknownKeysParam, zod.ZodTypeAny, {
    type: "wallet:sign-transaction-request";
    payload: {
        unsignedTx: string;
        name: string;
        chain?: string | undefined;
    };
}, {
    type: "wallet:sign-transaction-request";
    payload: {
        unsignedTx: string;
        name: string;
        chain?: string | undefined;
    };
}>, zod.ZodObject<{
    type: zod.ZodLiteral<"wallet:sign-all-transactions-request">;
    payload: zod.ZodObject<zod.objectUtil.extendShape<{
        name: zod.ZodString;
    }, {
        unsignedTxs: zod.ZodArray<zod.ZodString, "many">;
    }>, "strip", zod.ZodTypeAny, {
        name: string;
        unsignedTxs: string[];
    }, {
        name: string;
        unsignedTxs: string[];
    }>;
}, zod.UnknownKeysParam, zod.ZodTypeAny, {
    type: "wallet:sign-all-transactions-request";
    payload: {
        name: string;
        unsignedTxs: string[];
    };
}, {
    type: "wallet:sign-all-transactions-request";
    payload: {
        name: string;
        unsignedTxs: string[];
    };
}>, zod.ZodObject<{
    type: zod.ZodLiteral<"wallet:sign-message-request">;
    payload: zod.ZodObject<zod.objectUtil.extendShape<{
        name: zod.ZodString;
    }, {
        unsignedMessage: zod.ZodType<Uint8Array, zod.ZodTypeDef, Uint8Array>;
    }>, "strip", zod.ZodTypeAny, {
        name: string;
        unsignedMessage: Uint8Array;
    }, {
        name: string;
        unsignedMessage: Uint8Array;
    }>;
}, zod.UnknownKeysParam, zod.ZodTypeAny, {
    type: "wallet:sign-message-request";
    payload: {
        name: string;
        unsignedMessage: Uint8Array;
    };
}, {
    type: "wallet:sign-message-request";
    payload: {
        name: string;
        unsignedMessage: Uint8Array;
    };
}>];
declare const hostSchemas: readonly [zod.ZodObject<{
    type: zod.ZodLiteral<"wallet:disconnect-response">;
    untrusted: zod.ZodUnion<[zod.ZodObject<zod.objectUtil.extendShape<{
        name: zod.ZodString;
    }, {
        success: zod.ZodLiteral<true>;
    }>, "strip", zod.ZodTypeAny, {
        success: true;
        name: string;
    }, {
        success: true;
        name: string;
    }>, zod.ZodIntersection<zod.ZodObject<{
        name: zod.ZodString;
    }, "strip", zod.ZodTypeAny, {
        name: string;
    }, {
        name: string;
    }>, zod.ZodObject<{
        success: zod.ZodLiteral<false>;
        errorReason: zod.ZodEnum<["error"]>;
        error: zod.ZodOptional<zod.ZodString>;
    }, "strip", zod.ZodTypeAny, {
        success: false;
        errorReason: "error";
        error?: string | undefined;
    }, {
        success: false;
        errorReason: "error";
        error?: string | undefined;
    }>>]>;
    trustedBytes: zod.ZodString;
}, zod.UnknownKeysParam, zod.ZodTypeAny, {
    type: "wallet:disconnect-response";
    untrusted: {
        success: true;
        name: string;
    } | ({
        name: string;
    } & {
        success: false;
        errorReason: "error";
        error?: string | undefined;
    });
    trustedBytes: string;
}, {
    type: "wallet:disconnect-response";
    untrusted: {
        success: true;
        name: string;
    } | ({
        name: string;
    } & {
        success: false;
        errorReason: "error";
        error?: string | undefined;
    });
    trustedBytes: string;
}>, zod.ZodObject<{
    type: zod.ZodLiteral<"wallet:send-transaction-response">;
    untrusted: zod.ZodUnion<[zod.ZodObject<zod.objectUtil.extendShape<{
        name: zod.ZodString;
    }, {
        success: zod.ZodLiteral<true>;
        signedTx: zod.ZodString;
    }>, "strip", zod.ZodTypeAny, {
        success: true;
        signedTx: string;
        name: string;
    }, {
        success: true;
        signedTx: string;
        name: string;
    }>, zod.ZodIntersection<zod.ZodObject<{
        name: zod.ZodString;
    }, "strip", zod.ZodTypeAny, {
        name: string;
    }, {
        name: string;
    }>, zod.ZodObject<{
        success: zod.ZodLiteral<false>;
        errorReason: zod.ZodEnum<["user-cancelled", "error"]>;
        error: zod.ZodOptional<zod.ZodString>;
    }, "strip", zod.ZodTypeAny, {
        success: false;
        errorReason: "error" | "user-cancelled";
        error?: string | undefined;
    }, {
        success: false;
        errorReason: "error" | "user-cancelled";
        error?: string | undefined;
    }>>]>;
    trustedBytes: zod.ZodString;
}, zod.UnknownKeysParam, zod.ZodTypeAny, {
    type: "wallet:send-transaction-response";
    untrusted: {
        success: true;
        signedTx: string;
        name: string;
    } | ({
        name: string;
    } & {
        success: false;
        errorReason: "error" | "user-cancelled";
        error?: string | undefined;
    });
    trustedBytes: string;
}, {
    type: "wallet:send-transaction-response";
    untrusted: {
        success: true;
        signedTx: string;
        name: string;
    } | ({
        name: string;
    } & {
        success: false;
        errorReason: "error" | "user-cancelled";
        error?: string | undefined;
    });
    trustedBytes: string;
}>, zod.ZodObject<{
    type: zod.ZodLiteral<"wallet:sign-transaction-response">;
    untrusted: zod.ZodUnion<[zod.ZodObject<zod.objectUtil.extendShape<{
        name: zod.ZodString;
    }, {
        success: zod.ZodLiteral<true>;
        signedTx: zod.ZodString;
    }>, "strip", zod.ZodTypeAny, {
        success: true;
        signedTx: string;
        name: string;
    }, {
        success: true;
        signedTx: string;
        name: string;
    }>, zod.ZodIntersection<zod.ZodObject<{
        name: zod.ZodString;
    }, "strip", zod.ZodTypeAny, {
        name: string;
    }, {
        name: string;
    }>, zod.ZodObject<{
        success: zod.ZodLiteral<false>;
        errorReason: zod.ZodEnum<["user-cancelled", "error"]>;
        error: zod.ZodOptional<zod.ZodString>;
    }, "strip", zod.ZodTypeAny, {
        success: false;
        errorReason: "error" | "user-cancelled";
        error?: string | undefined;
    }, {
        success: false;
        errorReason: "error" | "user-cancelled";
        error?: string | undefined;
    }>>]>;
    trustedBytes: zod.ZodString;
}, zod.UnknownKeysParam, zod.ZodTypeAny, {
    type: "wallet:sign-transaction-response";
    untrusted: ({
        name: string;
    } & {
        success: false;
        errorReason: "error" | "user-cancelled";
        error?: string | undefined;
    }) | {
        success: true;
        signedTx: string;
        name: string;
    };
    trustedBytes: string;
}, {
    type: "wallet:sign-transaction-response";
    untrusted: ({
        name: string;
    } & {
        success: false;
        errorReason: "error" | "user-cancelled";
        error?: string | undefined;
    }) | {
        success: true;
        signedTx: string;
        name: string;
    };
    trustedBytes: string;
}>, zod.ZodObject<{
    type: zod.ZodLiteral<"wallet:sign-all-transactions-response">;
    untrusted: zod.ZodUnion<[zod.ZodObject<zod.objectUtil.extendShape<{
        name: zod.ZodString;
    }, {
        success: zod.ZodLiteral<true>;
        signedTxs: zod.ZodArray<zod.ZodString, "many">;
    }>, "strip", zod.ZodTypeAny, {
        success: true;
        name: string;
        signedTxs: string[];
    }, {
        success: true;
        name: string;
        signedTxs: string[];
    }>, zod.ZodIntersection<zod.ZodObject<{
        name: zod.ZodString;
    }, "strip", zod.ZodTypeAny, {
        name: string;
    }, {
        name: string;
    }>, zod.ZodObject<{
        success: zod.ZodLiteral<false>;
        errorReason: zod.ZodEnum<["user-cancelled", "error"]>;
        error: zod.ZodOptional<zod.ZodString>;
    }, "strip", zod.ZodTypeAny, {
        success: false;
        errorReason: "error" | "user-cancelled";
        error?: string | undefined;
    }, {
        success: false;
        errorReason: "error" | "user-cancelled";
        error?: string | undefined;
    }>>]>;
    trustedBytes: zod.ZodString;
}, zod.UnknownKeysParam, zod.ZodTypeAny, {
    type: "wallet:sign-all-transactions-response";
    untrusted: ({
        name: string;
    } & {
        success: false;
        errorReason: "error" | "user-cancelled";
        error?: string | undefined;
    }) | {
        success: true;
        name: string;
        signedTxs: string[];
    };
    trustedBytes: string;
}, {
    type: "wallet:sign-all-transactions-response";
    untrusted: ({
        name: string;
    } & {
        success: false;
        errorReason: "error" | "user-cancelled";
        error?: string | undefined;
    }) | {
        success: true;
        name: string;
        signedTxs: string[];
    };
    trustedBytes: string;
}>, zod.ZodObject<{
    type: zod.ZodLiteral<"wallet:sign-message-response">;
    untrusted: zod.ZodUnion<[zod.ZodObject<zod.objectUtil.extendShape<{
        name: zod.ZodString;
    }, {
        success: zod.ZodLiteral<true>;
        signedMessage: zod.ZodType<Uint8Array, zod.ZodTypeDef, Uint8Array>;
    }>, "strip", zod.ZodTypeAny, {
        success: true;
        name: string;
        signedMessage: Uint8Array;
    }, {
        success: true;
        name: string;
        signedMessage: Uint8Array;
    }>, zod.ZodIntersection<zod.ZodObject<{
        name: zod.ZodString;
    }, "strip", zod.ZodTypeAny, {
        name: string;
    }, {
        name: string;
    }>, zod.ZodObject<{
        success: zod.ZodLiteral<false>;
        errorReason: zod.ZodEnum<["user-cancelled", "error"]>;
        error: zod.ZodOptional<zod.ZodString>;
    }, "strip", zod.ZodTypeAny, {
        success: false;
        errorReason: "error" | "user-cancelled";
        error?: string | undefined;
    }, {
        success: false;
        errorReason: "error" | "user-cancelled";
        error?: string | undefined;
    }>>]>;
    trustedBytes: zod.ZodString;
}, zod.UnknownKeysParam, zod.ZodTypeAny, {
    type: "wallet:sign-message-response";
    untrusted: ({
        name: string;
    } & {
        success: false;
        errorReason: "error" | "user-cancelled";
        error?: string | undefined;
    }) | {
        success: true;
        name: string;
        signedMessage: Uint8Array;
    };
    trustedBytes: string;
}, {
    type: "wallet:sign-message-response";
    untrusted: ({
        name: string;
    } & {
        success: false;
        errorReason: "error" | "user-cancelled";
        error?: string | undefined;
    }) | {
        success: true;
        name: string;
        signedMessage: Uint8Array;
    };
    trustedBytes: string;
}>];

type ClientMessageSchema = (typeof clientSchemas)[number];
type HostMessageSchema = (typeof hostSchemas)[number];
type ClientMessage = BaseClientMessage<ClientMessageSchema>;
type HostMessage = BaseHostMessage<HostMessageSchema>;
type ClientMessageType = ClientMessage['type'];
type HostMessageType = HostMessage['type'];
declare const parseClientMessage: (message: unknown) => ClientMessage | undefined;
declare const parseCoreHostMessage: (message: unknown) => HostMessage | undefined;

export { type ClientMessage, type ClientMessageSchema, type ClientMessageType, type DisconnectRequest, type DisconnectResponse, type HostMessage, type HostMessageSchema, type HostMessageType, type SendTransactionRequest, type SendTransactionResponse, type SignAllTransactionsRequest, type SignAllTransactionsResponse, type SignMessageRequest, type SignMessageResponse, type SignTransactionRequest, type SignTransactionResponse, type Wallet, disconnectRequestSchema, disconnectResponseSchema, parseClientMessage, parseCoreHostMessage, sendTransactionRequestSchema, sendTransactionResponseSchema, signAllTransactionsRequestSchema, signAllTransactionsResponseSchema, signMessageRequestSchema, signMessageResponseSchema, signTransactionRequestSchema, signTransactionResponseSchema, walletNameSchema, walletSchema };
