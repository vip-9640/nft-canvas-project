{"version":3,"sources":["../src/schema/index.ts","../src/schema/schema.ts"],"sourcesContent":["import * as zod from 'zod';\nimport {\n  disconnectRequestSchema,\n  sendTransactionRequestSchema,\n  signTransactionRequestSchema,\n  signAllTransactionsRequestSchema,\n  signMessageRequestSchema,\n  disconnectResponseSchema,\n  sendTransactionResponseSchema,\n  signTransactionResponseSchema,\n  signAllTransactionsResponseSchema,\n  signMessageResponseSchema,\n} from './schema';\n\nimport type {\n  BaseClientMessage,\n  BaseHostMessage,\n} from '@dscvr-one/canvas-interface';\n\nconst clientSchemas = [\n  disconnectRequestSchema,\n  sendTransactionRequestSchema,\n  signTransactionRequestSchema,\n  signAllTransactionsRequestSchema,\n  signMessageRequestSchema,\n] as const;\n\nconst hostSchemas = [\n  disconnectResponseSchema,\n  sendTransactionResponseSchema,\n  signTransactionResponseSchema,\n  signAllTransactionsResponseSchema,\n  signMessageResponseSchema,\n] as const;\n\nexport {\n  disconnectRequestSchema,\n  disconnectResponseSchema,\n  sendTransactionRequestSchema,\n  sendTransactionResponseSchema,\n  signAllTransactionsRequestSchema,\n  signAllTransactionsResponseSchema,\n  signMessageRequestSchema,\n  signMessageResponseSchema,\n  signTransactionRequestSchema,\n  signTransactionResponseSchema,\n  walletNameSchema,\n  walletSchema,\n  type DisconnectRequest,\n  type DisconnectResponse,\n  type SendTransactionRequest,\n  type SendTransactionResponse,\n  type SignAllTransactionsRequest,\n  type SignAllTransactionsResponse,\n  type SignMessageRequest,\n  type SignMessageResponse,\n  type SignTransactionRequest,\n  type SignTransactionResponse,\n  type Wallet,\n} from './schema';\n\nexport type ClientMessageSchema = (typeof clientSchemas)[number];\nexport type HostMessageSchema = (typeof hostSchemas)[number];\nexport type ClientMessage = BaseClientMessage<ClientMessageSchema>;\nexport type HostMessage = BaseHostMessage<HostMessageSchema>;\nexport type ClientMessageType = ClientMessage['type'];\nexport type HostMessageType = HostMessage['type'];\n\nexport const parseClientMessage = (\n  message: unknown,\n): ClientMessage | undefined => {\n  const schema = zod.union(clientSchemas);\n\n  const parsedMessage = schema.safeParse(message);\n  if (!parsedMessage.success) {\n    return undefined;\n  }\n\n  return parsedMessage.data;\n};\n\nexport const parseCoreHostMessage = (\n  message: unknown,\n): HostMessage | undefined => {\n  const schema = zod.union(hostSchemas);\n\n  const parsedMessage = schema.safeParse(message);\n  if (!parsedMessage.success) {\n    return undefined;\n  }\n\n  return parsedMessage.data;\n};\n","import * as zod from 'zod';\nimport {\n  type SendTransactionOptions,\n  type SupportedTransactionVersions,\n} from '@solana/wallet-adapter-base';\nimport {\n  createClientMessageSchema,\n  createFailedResponsePayload,\n  createHostMessageSchema,\n  type BaseClientMessage,\n  type BaseHostMessage,\n} from '@dscvr-one/canvas-interface';\n\nexport const walletNameSchema = zod.object({\n  name: zod.string(),\n});\n\nexport const walletSchema = zod.object({\n  name: zod.string(),\n  icon: zod.string(),\n  url: zod.string(),\n  supportedTransactionVersions: zod.custom<SupportedTransactionVersions>(),\n});\n\nconst createFailedWalletResponse = () =>\n  walletNameSchema.and(\n    createFailedResponsePayload(['user-cancelled', 'error']),\n  );\n\nexport const disconnectRequestSchema = createClientMessageSchema(\n  'wallet:disconnect-request',\n  walletNameSchema,\n);\n\nexport const disconnectResponseSchema = createHostMessageSchema(\n  'wallet:disconnect-response',\n  zod.union([\n    walletNameSchema.extend({\n      success: zod.literal(true),\n    }),\n    walletNameSchema.and(createFailedResponsePayload(['error'])),\n  ]),\n);\n\nexport const sendTransactionRequestSchema = createClientMessageSchema(\n  'wallet:send-transaction-request',\n  walletNameSchema.extend({\n    rpcEndpoint: zod.string(),\n    unsignedTx: zod.string(),\n    chain: zod.string().optional(),\n    options: zod.custom<SendTransactionOptions>().optional(),\n  }),\n);\n\nexport const sendTransactionResponseSchema = createHostMessageSchema(\n  'wallet:send-transaction-response',\n  zod.union([\n    walletNameSchema.extend({\n      success: zod.literal(true),\n      signedTx: zod.string(),\n    }),\n    createFailedWalletResponse(),\n  ]),\n);\n\nexport const signTransactionRequestSchema = createClientMessageSchema(\n  'wallet:sign-transaction-request',\n  walletNameSchema.extend({\n    unsignedTx: zod.string(),\n    chain: zod.string().optional(),\n  }),\n);\n\nexport const signTransactionResponseSchema = createHostMessageSchema(\n  'wallet:sign-transaction-response',\n  zod.union([\n    walletNameSchema.extend({\n      success: zod.literal(true),\n      signedTx: zod.string(),\n    }),\n    createFailedWalletResponse(),\n  ]),\n);\n\nexport const signAllTransactionsRequestSchema = createClientMessageSchema(\n  'wallet:sign-all-transactions-request',\n  walletNameSchema.extend({\n    unsignedTxs: zod.array(zod.string()),\n  }),\n);\n\nexport const signAllTransactionsResponseSchema = createHostMessageSchema(\n  'wallet:sign-all-transactions-response',\n  zod.union([\n    walletNameSchema.extend({\n      success: zod.literal(true),\n      signedTxs: zod.array(zod.string()),\n    }),\n    createFailedWalletResponse(),\n  ]),\n);\n\nexport const signMessageRequestSchema = createClientMessageSchema(\n  'wallet:sign-message-request',\n  walletNameSchema.extend({\n    unsignedMessage: zod.custom<Uint8Array>(),\n  }),\n);\n\nexport const signMessageResponseSchema = createHostMessageSchema(\n  'wallet:sign-message-response',\n  zod.union([\n    walletNameSchema.extend({\n      success: zod.literal(true),\n      signedMessage: zod.custom<Uint8Array>(),\n    }),\n    createFailedWalletResponse(),\n  ]),\n);\n\nexport interface Wallet extends zod.infer<typeof walletSchema> {}\nexport interface DisconnectRequest\n  extends BaseClientMessage<typeof disconnectRequestSchema> {}\nexport interface DisconnectResponse\n  extends BaseHostMessage<typeof disconnectResponseSchema> {}\nexport interface SendTransactionRequest\n  extends BaseClientMessage<typeof sendTransactionRequestSchema> {}\nexport interface SendTransactionResponse\n  extends BaseHostMessage<typeof sendTransactionResponseSchema> {}\nexport interface SignTransactionRequest\n  extends BaseClientMessage<typeof signTransactionRequestSchema> {}\nexport interface SignTransactionResponse\n  extends BaseHostMessage<typeof signTransactionResponseSchema> {}\nexport interface SignAllTransactionsRequest\n  extends BaseClientMessage<typeof signAllTransactionsRequestSchema> {}\nexport interface SignAllTransactionsResponse\n  extends BaseHostMessage<typeof signAllTransactionsResponseSchema> {}\nexport interface SignMessageRequest\n  extends BaseClientMessage<typeof signMessageRequestSchema> {}\nexport interface SignMessageResponse\n  extends BaseHostMessage<typeof signMessageResponseSchema> {}\n"],"mappings":"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","names":["zod"]}